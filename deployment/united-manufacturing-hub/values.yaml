---
# Please adjust the following lines
# _000_commonConfig contains the most common configuration options. To go into the details you can look into the configurations option after _000_commonConfig
_000_commonConfig:
  serialNumber: "default"  # usually the hostname
  # This allows to specify data sources, which is mostly used for instances running on the edge
  datasources:

    # barcodereader reads out connected USB barcodereaders emulating a keyboard
    barcodereader:
      enabled: false
      USBDeviceName: "Datalogic ADC, Inc. Handheld Barcode Scanner"
      USBDevicePath: "" # Linux device path, if empty, USBDeviceName is used
      customerID: "raw"
      location: "barcodereader"
      machineID: "barcodereader"

    # sensorconnect searches for ifm IO-Link gateways and reads out the connected sensors
    sensorconnect:
      enabled: false
      iprange: "192.168.10.1/24"  # IP Range in CIDR notation
      enableKafka: true
      enableMQTT: false

    # Warning: unstable
    # cameraconnect searches for GenICam compatible cameras and reads out the pictures
    cameraconnect:
      enabled: false
      trigger: "MQTT"
      acquisitionDelay: "0.0"
      cycleTime: "4"
      cameraInterface: "GenICam"
      imageWidth: "800"
      imageHeight: "800"
      imageChannels: "3"
      macAddress: "02-2625A-09849"
      exposureTime: "1000"
      exposureAuto: "Off"
      pixelFormat: "Mono8"

    # iotsensorsmqtt simulates IoT sensor data and publishes it over MQTT.
    # Learn more : https://github.com/amine-amaach/simulators/tree/main/ioTSensorsMQTT
    iotsensorsmqtt:
      enabled: true

    # packmlmqttsimulator simulates PackML state data and publishes it over MQTT
    # Learn more: https://github.com/Spruik/PackML-MQTT-Simulator
    packmlmqttsimulator:
      enabled: true

  # dataprocessing involves microservices, whose main purpose is to process the data
  dataprocessing:
    nodered:
      enabled: true
      defaultFlows: false

  # Infrastructure
  infrastructure:

    # vernemq
    mqtt:
      enabled: true
      adminUser:
        enabled: false
        name: "admin-user"
        encryptedPassword: M0p0Y1hhR2VGbzRGTkV3aXVkOHFab05uTTE1dHl3R0U=:100:MaQCaaTWf260vQou02+Z5XKPtjxQJbS/cUfB0kxKf9qFzZQ1V4R2YtCH4GDSguE+CLIrhEG8m3XbuvdbWdKBnA==
      tls:
        useTLS: true
        keystoreBase64: |
          MIIQQwIBAzCCD/wGCSqGSIb3DQEHAaCCD+0Egg/pMIIP5TCCCekGCSqGSIb3DQEHAaCCCdoEggnWMIIJ0jCCCc4GCyqGSIb3DQEMCgECoIIJezCCCXcwKQYKKoZIhvcNAQwBAzAbBBThGcyvS/619i/hSkDkgnlzRO7uqgIDAMNQBIIJSKr11ZcJIYLJIZyUYaP6f8atEZ8kPHC4766I5kq2vDhEjWVGz4Om3pn/LXPkMk51u91EZ4hzGki3Zsp4IcwSDzf2c9U+EZEeab6mYGRxscQW6JGJp4ghE85osS9Ah6cvJujJC/VQaBCg6SNQVMsJINyPxG8y8QCX0LBIR49fr6Ok902BCSN/oV6NuwOU3ZGAKnJKsyeVw3NKa+Z1ctL7sGHZ51MmtquGjAtrjJ878TciGW91uq20hV4pLb74LUD9dubvJCxIsT0xp+fVsGQKkJT/tSbLao1igL9nhpUMcbponRfpHXh6CprLbNqVCcpF9pRhleDjHNCEmX8UHR6upIwiCXBbWJML9O6hWJA1I+prh5tykb5eFZnyWQ9QcFMRzFVoFu2YS1gdWlWOoBlrqbSarfJSems3+2iwjBCzwvG1WBkG18elvP9iEdx03ydbB6Jd9Zbqa7x1IlzTGA2Ne7dca0ZYpVSpxLiFCfs7CcQC7lpUjbyJcJUZnFkfC64MMDW5fz74DX7X4ZZblLMhJHzjPgeCxQCXFOdZb2yB5xV4A7HNXwq+ITILOxEuM7WnPRhPQlvK4DBgnUTHje7PKfQV6WTxq/xVi8YNhrGSoYso7DQv6GlG7Y8xz7K1uhNph8vGnPbJUaThr7GRKmFBbkU0lCqvtOUks693yWN9L7UWmdexDyqimyAHHE4HSV81wMw6177YyqGoGnYVUvnppmvurI4VMoI9h5pUU81EQcjyfK1CmfX0KgYPJNumc/VuTFqrAFEJmYQCjRrxOMNlwRN43LOfgtb5yXtkSioFo1RE4c94jmgrbSxey+c3X7z66VaUJGjNzm84JlYpa5C0+8lgqyH8Ln2klQcf9qlqy0oE2MfXD1AXW6ic31ZZaJFlEomNszN372BavYGz6Bc6h860+P2AZenpGoFpHpj/ktn3t6heJiFlFd7T0D5CZFBFAKTayIADm8RMctV8kp3ncwpHCTAeUfrNG+0B4d5FXhodvtU4poYCAbKkie1OaOGWG6qTflHOUXqSMzhPYYarzihzC7y9kBki+vnNWM/jFWDs5X0qRMGJXxqVsKxHuSmBQi+1pRkPr4ntjR77nyy7ynAN/EEoY29YJUvpaSG/1aJFinvcVGogKXIruFAIAB14n6ScACgwf+CtpPDil4FcII5iEahjD9NgiOwGupZcXPeJEr760ZPd5BnqrPHuau8/Nc6kykPEng6em+D9uZAmyZOqWEArvQKTDFcuEaNO0xTVY+VgqhNsGxanrugU5giJjDEP5Q29ve5j4+v1VvWDS31oA6H1pazn72clMYV9YwjKLItx7RsWu81HNv/tknU2UgP1SeJuPxUZFNs3o+wNJY+OV8lA/w7xlnnGLOb+rafzZKt2Hmm/rF6H3prJPOeykhO5W3pHBO9WEA6HwwtKKXEQJhw8ugi4NZM/SIMGgFdcPO/tM+AwMQzQjtDZ7RgK4SFlZViBDFoEjbgD93iihT4tH6wrwmHyFi2gVEkZ5LVvK0nMR7HPmRo8fljGE71KCTmltyoeYps6tD09JNy9PdcqwH17YehJwLByzSDQa5K1uFRShqtWu4ELee+w5xVN+ouIBnWWIG7cy9Ok4pebFWMZrEXS9BtelNm+00HJbCtLhyA6WNDvGL2FzslH97ok2GS8YHPR+Mf4P83zezxjgnskSI17ihAF72MwBSra4VBIJ2Ky/y6WnlROxcibcorIGCT1pr5rZfY1bFJkzRy8OgYg/Ru6AoX6J+LeOxH0irvFKZm0legBG7GeHfMzBRBS+1o+6aKDMTptncIxqN59GhrtQJ8gF1AzplXesgH8oxl61TKvRUwDNPoSFyAFcp/s9+N+Arm5S5bTjgInm1Y6dyQBeFSHpihO2uqCiOoLw5nmURF3l13yMjrxJCWZqhbZRc0Z/eUdqeJfC3jdC3gMKkETzT3vr+enby16z13gfmLk4TWfUUOlwetmMR22W5eTJSRBHzseK9YlO+3N7cihsTGPRYpgaJoKwRI6KOGaUEC/zMsb+LU/Gwpcsg7oXlEbKLQiFHYNND8iMNQUynmfiljrtkHNVNrrXblIYHP0C2Rd9EHF5UratnUPVoirLjUQ45IfcfzlCFlJvkd5cm0nRper/TC+jZ/UygJHdyNxILN4u2JA5D2J6cqrp4podvy0/nN2ueECv+PZNq+oFIPnrO7HJ6telBgbK9N/+1/VsFUvwZhVLTAjiy0MaMYekgzj3xDXVcdOpjCC48lMtap3aFvJU2UACPxJPCebnW5rt8QohS1mQZ/0gEHWkOcD3Yqmd6iixMAIKwAKe0xXAAS2SvnLfNHrjGXPboa9/EGWPzGoPKzDB9GV+ep/GmH4OCAfx0etyog9ogFg6PXWiiVKXskm5FlwhK4aOCEQg6xhyHV6JPP6u+FmBZDZWvCqgcyLjWnRJBt8zM7hq/rcE8r78iTmm8EQw6kpzKtqGqVTPNC5THkUs5q1YnveUPDNzaYO981V6dn1R2n+ocv8xAOpKJuI3H1pjHlieFhHqcY2/c3+9b7Ni5w9o1Hganunr9/MRN7aBwIAfaaLxQ7GHMf47Hu2Y+vT8I2OG+n9Dbdf5OWDHg0EcKn8wLvi4vIMBCPO9DmCDtsfP90bWYKpT3FIOrTzFxdk+DLqgzyz6o57goF/Sh9S9YrN6XnDGJhsYsyitWMSDLqsyznOpeCG2gqugQiBYqGx51g+dJHulSQhJLQUiYDkrsJVuRtyTRgLK5ZCPscg7KOy/oii1YSbnezuMvg2LkW0oaw5xwVO9YcSUTvYEUxRQw6FSTNyZkt6QXhmQcrt6trFq1IzG4ykI1u9pEfjmEg6WIkXsVgg8Mz7LAZPVTGekWwKNKgLGUjwtkgEDdcSoqavE/dYIRRAsXBbBsm1rkp7B99dX4N7ZS0fc+alMTYHJGxv3RPZLxE4ifrU0K2XFQ02RPMH/7ylOm7aPJngCSVGuhQGhBp+3Rk4ovILOWs4HLdtYDCN7+InUncDRyPYDUptw6gjVhETAFeYU2jbMHNqiRbi4c0ByUoPZT1fovUn0TQ+HjSA3TbMdr8oDQeMZDyCpLHd7DKq2N/Rd25HhEHoon8y6L1vf604IGzNMq9kbErGQROtjQn7LKwp1SE2+SCx2TFjiqmU6GsspYJ8CdmZVH0tWDFAMBsGCSqGSIb3DQEJFDEOHgwAaABpAHYAZQBtAHEwIQYJKoZIhvcNAQkVMRQEElRpbWUgMTY2OTYyNjE3MzA2OTCCBfQGCSqGSIb3DQEHBqCCBeUwggXhAgEAMIIF2gYJKoZIhvcNAQcBMCkGCiqGSIb3DQEMAQYwGwQUtr0R8/w+RYVrDdbJ2moaSFIQcKICAwDDUICCBaAsCD6y1vnqSvKZ9ScKBWMytftv3p5PHUkelPqGtR51aH2celoiwTVNqyoKIBTECnAR5dM20dD6yVTNoTAop7zp5uGaOWYsdCz7qrlwaGu/Gi5JeZMcqotyaHkoK9UV5r5+HgNhtwTIGah5OJDmCR0JYNy2n3YjdE//7VVDjGj/s1yW886WsgXma1GTed4GWE3kCGGzY8YLOT1QwQ6l+Cwmy9Q72Pq1XVmkUflYeGPh6idKzDHoLjG8LTF7xo4ewxDU9VeWAG+mzamClvZ8lySzjcMgigAOqmqzKZ0/ZqSig3xTNX66X4piLzlgVmoA4ISfmpOFjkltp3/cCvcd9nUjbBJLskLeqviFIruoOJE5QdGs9qJ9hxltDEqHYvuJeFLWy8dtcs+S3v/WV0VJfeHDHymaUX+9ScmrXRtUu+Uly08rDtiHHt9YGObmz2INEQdGqJ8U5Rh8xsj1U3TmWL1mu42pC+Xf8Dmu2qVGwgEJcaphBjlm8/zHE9z8e7yL5vFlgCh/RD4Q2nJYC4Lt6iuvjNIkhSc15wVQ97BbjiLG2P0YGmdfTtdmS0T+P2WKYrYdt+N4Fy+HXWPCGSHeMysBb4/4p2FemgqiyNDeg+hoPqSXl21OXmu34hazACN214ywqltaQoi9d4yzn3i7yCTEgRAH7aECwIxj0auA/aVWBkYmNYAxuYw2NuQTQQH5g/Sd3EhG8k3uvRa2zd3J5+o3GN6CA4DR8OtIedg2vJhxEj7hHwG4U81O5nqppe/zgCgCSyK2s4s4MLhbAWPCxWGSKwAlWHg/eaYjumpp6ioN03JTlfEElK2yX+PDkCl7lZcy0Gu4e8vX3R7GCUmbukuIwP4wbDATX/ZjDPWc6oUE+DmO+4UJ4TM/qWk3mAGAUHoa2kUqMFBaBEDJZnBdZ2ETupukLT0/jWjX2ELO23NxaGfhgmrMP/3cW5KcpTpiBf7Io0QFfCk5VvnhBnvwyjem7hPEZiBGcI2nh/S2cfDmDrv0lZyNF3sOWw7ibtK0wnr3w8qBMZz5WA5Ixm66WpOkb4NXTLeXu67h4uYeAjqm26gOz3EF8zk0Jz7qXn36AJkRFhje03kRG6RxTRDdKRn5WKd4ctQ4kMwSjIxlM8rcXNgSUfSyCU1cbSbwHZ9fBW6lG18D8mh1HXJqMVp8jYXDJluzWGXhHB09NOZwPV5+jeNe95Vzbm/e0RVua27LETa8WXvb54S2cI4DMwtnSL98e+s8swbltYkt0k/vWlTQJx35Ti57ew809fbMFxz/7ZOQyJw8Ji/aGfJzIEDi8X2gGvwrNy0cMlCmUVNQSFNzJBIaSPGMCc4hjVQyr7drzZYSStI9VOyHZcAXwB/uGccAkBS0iy2o5oFJyjz6jtYWGsk6TNL0HtEgUZTQZkEN+Mf18CuAsRBrxUX46y4lMzB7NeDrSlW7wAL1/n/K4FpVX/CCcSm9HlGTxCP5Q4EelzZvg88uD+hkaj6NMsHnhy2GlxL81dkQBTT6mPGVW3cPntQosyPLGsxVVuKyvmshSKojlyABZeeuo7kz/jTUOgCM231wuI//MfP8KMLQNeUO1hGH+PyFffB0Gl+YPjWoqgzyg6DFEjscEkqUR2TKwjNLQLeowYVOfGxqLAeTjfYafNwzYUFakdyqSe35ZEQ631MG1sGHCyVm8J8M2C/JHzYcOHEIuJdoT4DXg4SX3GTdUpDGOJjWIRDc1zmPryHj2rGuGQnLM8iaG2JP3Oo7Wrf8H21PBKZcmxx1Y4NmVGAoIf29nQHayZ5ohJ6bT4d6tPJelRg9LZwKps0pwOum0DX4IbSw4RqY/IHbARrMiHPaMP8ssx/5fDelMXnH4bzzCDWI+uyMmRL/sjSNBkh9+XKu3K2yKLsTdoLL6wvrAoj2y6knYab6kD4JQH918JxMbKcwPjAhMAkGBSsOAwIaBQAEFJ7DT0lNh2KhS/+G8LvyytX9MKkvBBRrf60+Fj4zC1CFYfer95AoYINgfAIDAYag
        keystorePassword: "changeme"
        privateKeyPassword: "changeme"
        truststoreBase64: |
          
        truststorePassword: "changeme"

        caCert: |
          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGSkRDQ0F3eWdBd0lCQWdJRUNtMFVRekFOQmdrcWhraUc5dzBCQVF3RkFEQTZNVGd3TmdZRFZRUURFeTkxDQpibWwwWldRdGJXRnVkV1poWTNSMWNtbHVaeTFvZFdJdGFHbDJaVzF4WTJVdGJHOWpZV3d0YzJWeWRtbGpaVEFlDQpGdzB5TWpFeE1qZ3dPVEF5TlROYUZ3MHpNakV3TURZd09UQXlOVE5hTURveE9EQTJCZ05WQkFNVEwzVnVhWFJsDQpaQzF0WVc1MVptRmpkSFZ5YVc1bkxXaDFZaTFvYVhabGJYRmpaUzFzYjJOaGJDMXpaWEoyYVdObE1JSUNJakFODQpCZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEzTXpSTnZuZ0lMM2ZIU3IxK1NaWGp6NjZjdGtQDQpESi9KOU9BK01abzBSeUpVVVVOcUdSRFo4Vk13UjN3ZE0yY1c4M25oZVkxU2JNaWJvMGx0TmZkZ1JwNDlqeGdTDQpPbzNXWjlPeC9qS2ZkOHE4M0tRVU1QR2wyNzE2REVWSXNVaVZ1SjloRisyZlp4VHlnLzB1eHR1TVQ2ZDE2ZXgwDQpEalBxTHlBZFZhcTJjdGJtWWs2Rkt1T2lWQkJsSWRkSzdGY1J0SE0wU09ONEcxNUcrR2o0bmVRYWhlc1F2cHNGDQpjKzNEQ3huYi8yUFR3U1ZGR2JOQ0c4ZkJhL3hTdjlDdUpxQmRPWStPYzRIR2xkT0cxenRWeUtMWW1JakpyYVJhDQo0Q29WTm1hQ2FIenUwVmsxb2RmVU83eXdRTjU0aS9nVlM0THVNbkRPaFFwOEdwV3BsZFdHc2hvNWdCaWs5UDVPDQptS0ZHK1UwSlp5aVpPRDF0QTQwOFlmUjl2YlJXc0Y1bC93bStQMElvVStQSVJPbWJVNHJzT3dER2cxSHg2U2NEDQo3TzR1UXRUZjhOQUMyR3ovV3JScmFkV0JQaW9QbkZhU29vT1Qva2xxVWhPKzJmNzZXakNNUlVqajd3cUlpOVJYDQpvNWtiTGJ5T2RpWFFxS1JTUW1TOFJpUTBuN1pVSG5OZjNRT2dCNzhGWmpxV2NFUG5LZHVDUlF6VmlHUG53Q0VlDQp6aXJFY3VxTllsaEkrMTF6RmdJL0RHUDJEVmsxem11TmxOT09uaU1HS2poSGR2dkR4QkZJakRsYWtYYUx0SENBDQowNVE1aThsb0F2dTgrc1pXVHJtL3NDRnBnWTV4R09VS3o3bDhxMG9vRVErUjlGclN0Tk15U0JyKytONnQvUktIDQpsdy9kYit0K1FKcjA5RThDQXdFQUFhTXlNREF3SFFZRFZSME9CQllFRlBkU29jZWFSaEpwOXNTOHhYOHJHWElTDQpVdzlmTUE4R0ExVWRFUVFJTUFhSEJIOEFBQUV3RFFZSktvWklodmNOQVFFTUJRQURnZ0lCQU5yMGloZDU0amxMDQpCTUo4S1NOQi9VdTJ2TUxuWlEyRzVOdENzMENwellnenZTOCsySFE0ZXlEeHF2aXJmVlQ1TGYxZnZ0OGVDVXR4DQpxbGdHdHZFVkN1TmVhbk1PdE9IZDFobVZISTNIMGQ2MXdheWtJNWpzZmlVYVVucmxkU1hIS2pOdUUrUjNEYmFnDQpLNVgrUnRpWlcvWUl3QU9sSzgzaTdUVEpqakhIc3o2S1BlbUUxdU8rb2hyOEtCTjgvbmJUdGIzb3RkTC84RmRCDQo3RlpQNmxFOG9BU0RGSm4rVFVQRUYwZkJ3Wnd1bDd1Mm1UV09hMEZWLzJyb3QvQytZam5CWUNEbEdCRlM4VDk0DQpLMG9EUFBMWXpwYjdLQW9QampCM1h3QXhDajJOV0tQYzhMam5YTVBZcm9KQmovMGFQTVNBNG5WVWt5am5MVjBoDQpXTXFZcHF2VTUyTGZhdHlMOFhIaVhERXA5TFVBMmxZNndaN2tRSjEycXVDNWx6aVA4Q0JJNkI3Tmt5MzlHYkFrDQo4bmI3bVJzUHQ1ZjFwWnJ3eEEra2svS0R5QWkzQ2l3L0NtL0oyOXBTVmErRnRrVkFsSzVSZkszdHc5eVg5MXlWDQpIcGc3VzlNZngwZVBKRzBObXFNQVJEbGlHMjdHY21vcDhMWHVaNms2N3RnNjNsNXR0V2FWd2JCLzhqR2szQXk3DQo3UTNoRDhtZEoxdlNLZm5ITDhpdW05U3VRZzdmR0Z1a3BldzViN281ZERhdGJmdEVLVEM4OVdUYmpHcDliWldSDQo1dkJIdzhrbjB5ampkSUdQMUFUeW05aUZIL3VSY3VrR3Z4bmc4UmZRZkVubmJ6MWF0S05wN3JMbFE5ZjdJOERyDQovUVgwVHVxbGJQdHdaKzdHQXc2amV0MGxzQnd5M0d2Kw0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
        factoryinput:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZEekNDQXZlZ0F3SUJBZ0lVYnpQRHhHb3FqUm9yTmZpMEErT09uaFFwRm1vd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0Z6RVZNQk1HQTFVRUF3d01abUZqZEc5eWVXbHVjSFYwTUI0WERUSXlNVEV5T0RFd01qZ3lPVm9YRFRNeSBNVEF3TmpFd01qZ3lPVm93RnpFVk1CTUdBMVVFQXd3TVptRmpkRzl5ZVdsdWNIVjBNSUlDSWpBTkJna3Foa2lHIDl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF1NEhCdlcwZmlNTnBEMnkzZEVxeW1GekdxR2x4T3BsRlFzTmogSXBITVZDdTR1NHVFZWtnMDgzakw1dE9GcHlOVG55eEpBa1lFK0F0d0owZDZxYXN2cWxjTG1XNDdTdGNSM0NoaiB5RnV5VTFJaFR5VVpTNDIxUGk4UkgrSjJNUGhtYkErTXJIWVRnSmNTWWlFYzg4Nit4NWJqTGZXa2dJWTNmTG1SIHZqM1hzWlpBUFA1V09RNUpkVlhJeDRZc0wwNDFxQUZHZFFKb1dxcXpzQXpPczZ5bk9sVHRiai9HdWFwY3FLUWgga1lsVFNoZERGaEJhVVVFY1BrSERibnJtc2laaHU5cEtKUkNDcWE3SWNwQ0NBUkUycDZZZEp0ZExkU2gxY2FzUSBYdUp6bWZsYmZtaUEwSnZkREpNVDd5Z0VzMzQvVm03djNPOW9uMUxGZUZsc3Z3YmFWankveEJ1eXVLdWZsTjdGIGZraVZvbjVlNXRkWE4wb3VwY2ZrWEFyL2ExUW8vMlF1Rm82MGp5YlBlU2p4ak5nL3d0U2theUg1RlpnYXJmMFEgNjZlRm1Tb0NvM2IxQ2ovOExKTDc2cE5mTVNmWWxPSXVYZUhQUXNVQ1RrT1hqdkE2RklQV3RaaHJuY0pHM0pBUiBxemRtTUN4cEthbDZKQ3NtcW1CZFpucXM5QVdNUHVSeHVZNklOK05HbVhzOHlqZzdMbUNxL3lGeEljZkhoZU5uIHlFM0haVldDeHZTdFM0ZjF4d3JMOVB0ZXdXL3JFU1NXT3FxcGJSdTE1R0xCVWFScFlqdlNHUEE4cE9ySS9xbW4gcUNVOGUvYnNQR1JVK2lVcVdqbXQ0aXpGelUvZ2FqV2lQc1VhQ2M1OEl6VDA2eU53TENiMm5WWU1ZVXJUdnVvcCA4My9XaGMwQ0F3RUFBYU5UTUZFd0hRWURWUjBPQkJZRUZHU0xWQ0o1LzlDaWdUNFNiS3FNNzN2Z0ZicjRNQjhHIEExVWRJd1FZTUJhQUZHU0xWQ0o1LzlDaWdUNFNiS3FNNzN2Z0ZicjRNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHcgRFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUhIRDJBc20xY2RqRHVMdmxVOVBtZFpYM0ZESVhvZjF3UWVJRVNYQSBoMTA5MDZpWFdPTXRETjF2Q2I0NStpclhPcTZvb1l2YkRYc0h2WUpsSUJFbll6MXM3VGNmM1Z0cERYd3JLVjFkICthQ0ExajY4Y01QTm1vTHJ4emZib0Fwdk45WnplY29sbVYzdFVkcXlucnZ4eTlieEpMNXVMRFBmR1p1NFpYM1YgaDNkUzRnMkRPSzQycnI0N0J0YVhJVnNscEpCTVQ5TCtWbUcxVXJVMVpPWThRb3I1Yklwb0s0TjBsN2ZUYzhuZiBYc2FyWWRvTGhGTGQvZUx0aGVUcGk3VlFsVGtxME5IKzVNbys1MFpFd0Z3aFhOeHFpWHRkY1d5VGlWaHBocnI0IDRvQi9HSDYvZXN5U2pFK3gvc2dPR1BuWjdSd1FIaUlDREcxZWNrRTd2OFJhK0JUUmg3dUdSdGZ6eUh2YkpSUUogOHFZbDBvL0xJbXR4TENTY0FNMHpCbkx2SmRWY01KV2VXYkpzV3dtZ28wMzdUNC9QeTRTV3hJTjFYR21rc2JIVyBHckd2QTY0VHBnWlpVT0pyQ21NNFcxMEwyMjZ2cUZkdGRla21sS2ozVXlzOUNGRDY3Rll6NUZTRE12c2wwS1RTIE5XOW9FaUtkeHcrYVZ6VkhOMWVwb0pXY2R0d1ExS1RMS2VvclVJK2FoMjRYMFFCY0dCeWpBMVEyMm56N0h4Q1YgcXNQd211K0JPOWZNZHVXMWg5WHFjVnpuS0lsT0E4VVZDQVBMSHFQMGY3M2hIK3RQYk1ScG01NzlFdTU3cmc0ZiB6VWU3WUJBVDFqbXhVRHE5RkVVVCsrYS9LREFLbG5reG8xQ1M2TGtoenJ1R1Fvb3dQWkpmejAyc240VkNFSkY5IDdOdk0gLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpSQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1M0d2dna3FBZ0VBQW9JQ0FRQzdnY0c5YlIrSXcya1AgYkxkMFNyS1lYTWFvYVhFNm1VVkN3Mk1pa2N4VUs3aTdpNFI2U0RUemVNdm0wNFduSTFPZkxFa0NSZ1Q0QzNBbiBSM3FwcXkrcVZ3dVpianRLMXhIY0tHUElXN0pUVWlGUEpSbExqYlUrTHhFZjRuWXcrR1pzRDR5c2RoT0FseEppIElSenp6cjdIbHVNdDlhU0FoamQ4dVpHK1BkZXhsa0E4L2xZNURrbDFWY2pIaGl3dlRqV29BVVoxQW1oYXFyT3cgRE02enJLYzZWTzF1UDhhNXFseW9wQ0dSaVZOS0YwTVdFRnBSUVJ3K1FjTnVldWF5Sm1HNzJrb2xFSUtwcnNoeSBrSUlCRVRhbnBoMG0xMHQxS0hWeHF4QmU0bk9aK1Z0K2FJRFFtOTBNa3hQdktBU3pmajlXYnUvYzcyaWZVc1Y0IFdXeS9CdHBXUEwvRUc3SzRxNStVM3NWK1NKV2lmbDdtMTFjM1NpNmx4K1JjQ3Y5clZDai9aQzRXanJTUEpzOTUgS1BHTTJEL0MxS1JySWZrVm1CcXQvUkRycDRXWktnS2pkdlVLUC93c2t2dnFrMTh4SjlpVTRpNWQ0YzlDeFFKTyBRNWVPOERvVWc5YTFtR3Vkd2tiY2tCR3JOMll3TEdrcHFYb2tLeWFxWUYxbWVxejBCWXcrNUhHNWpvZzM0MGFaIGV6ektPRHN1WUtyL0lYRWh4OGVGNDJmSVRjZGxWWUxHOUsxTGgvWEhDc3YwKzE3QmIrc1JKSlk2cXFsdEc3WGsgWXNGUnBHbGlPOUlZOER5azZzaitxYWVvSlR4Nzl1dzhaRlQ2SlNwYU9hM2lMTVhOVCtCcU5hSSt4Um9Kem53aiBOUFRySTNBc0p2YWRWZ3hoU3RPKzZpbnpmOWFGelFJREFRQUJBb0lDQUVTL0FpVk5TTzUvbHBsTkpzWEFUVktIIFVWNlZxaW50My9MbWFBWllwaTJHQ2lqWXNpMlRJN2JRWnhHdUk2WnYwVXplazdYOXJmeXpWTjlSMmFzelZEcUQgeDREdFpWZS9HcEU1VGJ3N3dsbkNGdXhKa2NpZG9BRzRoL0xFdU1pamlnbThlYnNSWDMwWjVtZUw5RzEvTTN0QiAydkVTeXNsRWJEdVNYZGorRzRMRXI3Q3RIemUwQVVLL3ZPbEtUQkRiLzlnay80d080ZXU4QWoxZHRMc3paZXlCIERyd0pMZmNNZXdScGlOVXZJQlplQ1A2aDZEczZQL3lqWjkrdHQ3OUJTenZ3Z0phdVF2bXJWMXFKbU9DRFN5S1UgU01QZzA0MlUwOXBrK1krUVB3b0kzbjZ1R2V4aCtOMlBYeE9qL0hWQ3FENHNWazBPaWJGQVM1NGdTenFPYktYbyB3QytDYTRYZFhjWjV2THBDSGVFKzkrdWpuSjZBNm1ubUtzYkEwbmg5OUNNTlRJVDg5bEpRL042UWFNeDllVU5jIHVaaytvQWNVRjR0T1hOMWNQVHN5b3ZvSFdrbUw5dGtZSWVQUXp2NzA3SzhpcHhPVFoveXU0MzUxVXNqanQ2d1kgWXhyUzI5NDFjRThteUFmVDkyVmFuVnNVYncwaTFuMXArSC91cGptRDZhTzJUNGlaRU9CMHAvenZwWFhJWWw5ZyBrNzJhRk5ySHpYOTNTeEFybGxOMXVqRVlsaVJRNmxsOXpoMmUwcjhXcnBSTXg4RXlQYmg0ejhZd1picnJydUUrIGx0VUFEdUdOQkFUTDRmU1JFWFlMeHMySFVySGZ3b1o3ZXhhcHdBZjFjNEJjcCtuTE9nQko5MzhkZXJ6ZVZNQisgbVViY09pT09kdjd1UVdoWWJSY0JBb0lCQVFEajVRMTFYNUx3dHBhMzhhYWFFUm9EVlBZalJDRndibHd2Vk9qdiBTTnFKcEFtUXBnQkVTNng5RXVlWE9xbXZPOUZZanBvOXVMK3BNNlZnRVF5R2VsNDEwcGVya0wrNVlyYUF1R1I3IDdrM1BqWlhZZDB4dFNSNkdkVHBGclJUa2lQZVloT1JJaEQxeURYSGYyelMrTDVEMkVON1pFdlVqdGd0OStZNTUgVi9jUU4yRUJSQktKVWp4dTJXT2EyK0Z1ckZVQkVIVHNCQ3ZINktwbEppU1doaC9EaTg0WXZ6QlgxNmtXTis0ciArdVF2LzFUQXcwM0oyQWlxOUs4ZDFIRTczbDF2aTE0WHZFd2tmd3E4Q25jSHRPOCtTOGU5UHdZNTNqN0lRaXFwIHJScUwxTnVaN3B4SnpVaUF5enFIQ1VDZlFtbnBKNGFvaWpsSmM1OSt5bUJxT2tnZEFvSUJBUURTb1pxZlkzZDEgdnlVR0JWMEszZjR0K1pjVnYvV3plS2s0NE11cnFQL1lxVmdyd05RWE8rNmxVQ2ZvZlVKNFdYZHpna3c1QUx1byBtV1JZNVZMK0o5VU80cVdJR0tMdWxLSmNlSDlKWnBQSHA2VVVwT08rVEcveHF4RHFLOGp5RXJVd1hobUc1TVBsIEw3R2MxS3YxTWIvZ3lLZXpNQkF5WnR2U1dIekZlWTA4amEzYjBFcFNkYTJwbTVwMDFKbGZUL0wwYm5Oam80dEggbDRaQU9NZnBlVWZVQzhnZVN2VjdaTFVvbmlJSVI2R243bGlzVUpUbFF2cnZ3Q2MvRm05MVdmL1d0M1RBcmdQWCBFREFFNVd3OFJ2NlVtejRVa1BtbGNhRDdzaTZ6NkNPdlZzeWRPNlJTeGZaOVliY1FGeHcvNDU0bTNMWGc3N29NIEZuYzlWK3NjaXFWeEFvSUJBUUMvOWJrdmE5RFc1OFh1clNNYlZWcG5BaExPUTk0eTJSTFhYNXRScXpsQmhTWDEgYkk1KytJc1RVM0EyQjFqVTNQc0tzQnVsNzgrcFUzSnlpQW5YNEkwb292blVydmwveTNGVTNYenVreDJCdlk1QiBwc04rcm4rQzNJMjRFUUd2T3R2cjRjeDBkTWRaSVpBUThwRHJ2aDlKMVk0UXBSSk9BVktPeXozQ1ltRWVqTGN1IEhNdk1WYlBIMzE4eUd4STVhZm0wQ3N1aDNpV09ueUdnVDgrejVzZ3NxNzl2UXVRU3FmcW9WM1pNSDJwRUw3dVIgSHpHUDJtUDZ0RjRwTDBBdUlMRHRleVJIcy9raktNdSs5c1dxZlRLa2M2cU1jdURvcjVhTWtvZGpJd2RnVDJ5bSByY0dCdk9QY2NOTWMyYU5RUXQzNVlhemduSVdDcEZ6dHJNUW4xbTNWQW9JQkFRREo2a05Zc2podGRzeGVKandZIFU5RDdiNzJIQ3hyVmJrRUNsblNJWFp6TnJTRXA2Rk1vNXJvU1hYRzBiSWVRNldzYUh2bEUxOUFOZ3Vad1ZYNG0geURaMWE0MzFsbkJ5dDZlaGI1M04xbmlxTjZxSHpMM0p5bXF4eUNTUjUyRmR0ZE5keDRjL0NnUkVxMkRmai93OCBNL0hWNFdUcDRKUldUTVpEc2JJQ2VGQ05rTi91elpEQjFhK2gzTm5IVDVxcmhPL0pwQ3dYZzByY1dZUklBbWFhIENUcHpLc3d2UmZwbnpKWGhseDNXeEJ4UzZLaTJueFR0WmpVNktnRTFlQ05tNHR6Zmo4UnJoU1dIUUN4WU5UcDUgMmpEb2NwMmpoNHJhTDhCOEtFYWZEbFZQRzYxUXVVRUFYR2U3c0RXV1JpRTltYzBkUWcxVTBWcVBoZVhPdDM1YSBRUXJ4QW9JQkFRQ0t5dk84c0JNbzBXLzZ6Tnl4UmJEUHhnTm50bzNWWm9qNVh0REJaSDJhOVlubVNqZ3BMOUZBIHRuMFJYUjJEOHJtblkxRXdpQlR5RnBFajJZRXVjT3pWaWJZdjdJUXNsUVdOUWFadkVlRmMzanNtdk5EcEtSWnEgTUd5WHYydndrU0J1cEFtc1gwamhmOHRLVWxPcW9rNk0zcTBuSk1MeXRDbTkyOThPMTBWc2VDd2doZVUzNlFjTSBMNW5wc2lFMHVlM1JmSVNEenFrQXZCWWVLZy95QVA4eTdLUG9wczVSMUQyYVdvZHB2K0o4NjQwZSsrdzNyV0tQICt6S3N1TTBvNS8vWXU0czlEc0xFVjYzK0R2ZmoxcDk5TWxldnVQTFZXMkF2TnoyMkpLU25rZndzd1dnenVmYWEgTFBmRmwyWFdqQmVJbFh4cHJzUXlpTWZWUmxDUWRCQm0gLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
        mqtt_kafka_bridge:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZHVENDQXdHZ0F3SUJBZ0lVWTE0SGtBbFZnUlVaSjBHVWVpUmdJend2eXEwd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0hERWFNQmdHQTFVRUF3d1JiWEYwZEY5cllXWnJZVjlpY21sa1oyVXdIaGNOTWpJeE1USTRNRGswTmpBeiBXaGNOTXpJeE1EQTJNRGswTmpBeldqQWNNUm93R0FZRFZRUUREQkZ0Y1hSMFgydGhabXRoWDJKeWFXUm5aVENDIEFpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT3QwY3VScG1KTFJYV1RzUVRRRmRINE0gcTUyU2RzMU1aQWMyOHV5alNlN082Ri9xVk9GaG0wdlZhanJ5dDJsNUI5NlQ4cmNQYWQ5RVA4Zy9CNzBobTF6dSBvZk1IcjBTY1VZREMvYUxrSnRSNjNDTTdYMEdCWm4xUkFzM3hHYWxTdDNCMlBKUE1xdEUyd1hoUGh0cTZQcFgxIEJXL0dKeG5uc3lMYmNOUk05a0hSOTU2T201SEowTGxPNkFONDRQTHdmQy9rK29SUjlQTXdwS095WTFmZkl6aWcgMVFDVXFDN3BDVDJ3ZS9OMnZBMkJYRmQzVW9odVl1OWFKNnRINitUc1lPNy9oQ1FHN0o3cFNKQndvUlMwQnk2YyBtdVJHREpDZEVIMm9UYW0zNU5nNkQ0TVVpYUVCZ2tOaWxTczVpMTdocTNvWVl0UEJWVDN2d0ZiSStQSFErZWltIGQvWE0zYmpiR1BaSFZodmFoOGpXWHFqTWwxRHROc2RPQ2ppZTNZNUY4YUtlbWlyek5iQklycVZ5a25nWm1La0YgOW9rT2tBNXl5azE1RXNESHNaMlVhcDdpSUZ2Szd1czdsSVd3a2RHVmZtWkRyK3VPYnFiL1F0MzBKQVA4Q2FyaiBPaUF0NG5yT2JON1hRNThNd3F5dFBwQnlyenVYV0pkcWhleTZMdXdNOFc0YkRmT0c2cUdxYklPbjFTemFRZUp5IGJpd1ovZlFjM3ZpOTBnaERIZkJLSjhwSVZjaURmZnBPZFd5d0lqQ21kMlhjYmpNYUVVZGFRVldkMWRBcCtGMkMgV09TQ3RnL212V0MrcGJGOFhubU5ib0N2c2VDM0NXVmNiYUpOQjdZdkg3Q1BCODRwaEx4aC92VFdsOWdUMXZzUiB5emErMHRMV0Y0aWN2d3dKQVF0N0FnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCVEtRb1JSdE9ZVlE5cnNjVHcyIDZpMlJkMS9aeURBZkJnTlZIU01FR0RBV2dCVEtRb1JSdE9ZVlE5cnNjVHcyNmkyUmQxL1p5REFQQmdOVkhSTUIgQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFEWVpNcnZwSlVJQkc5a3BUWVNGRGpONGJuVSB4ZVg4bVoxTndtQldNcnhmdkRVWTlnOXBXZXdZaitTNXllQy9yczFtbm5wRVJCbG14YS96UUxBWUxMK0M2Znk4IHB6UVJtUVIxVEtLNDhJNjFmc0dSaU00RnhNZ3Y2Z1Nka1VsdkdYZVdKSW5ycHZHZGkzUzhBQ1BNdm82NW5tOEggN0Z3YTVSRVk5SHRmSWxyWWpnS1lxdHVhMW9RcEtIb04xQzRpR2FmeEQ2d2hmTkNPYVdvb1E0eGdQbDIxYytVSiBaRTVqVEVwTU5EOUtFTDJSSkY1cm1rU1VtZVVPSnA4R0xDTTZrM0NaQVlRSUpCOFRSSTB6Wng4Y2pwRmhZN2MxIG5Pb2QrY1dsUUs0UlpSUy9KNEhRMGtKNTEvakNtQ2FyVHlMU3FPQjNXcXJTMnY2VFVzRDY5YlJTcjNKa1Ezb20gOVZxVGxjWVhhK0tYSDJSQ0ZhY3ZjNGhWOGxLUmUyRnRzRXJ6bndWZmxFRGhjdHJFaGZ0Rm9yYjlEVCtOVjE4TiBIWDArSGxWYVY0a1p1Njc0MmZZZS96WkgwT0ZqRnk5SkdiZFRHcnJqNlptdk5uNFhTL091c3FJMTlsdkhvWW9mIEpPdjliWkVwZzNqZHZxNVo0d1JVT2lKZEppQjF5dXpydWs3WWptMC9WV1c1L0tLbUtOMmU2Y0N6Vm1wQkJEckcgSk1EaWtXSENaZUFXVnVlRllRMi9sWlRUOC9kZlBrOTRHOENrRUpKb0JVdVMzMWtuRGp3Q3BjcHR1dS9ZZnp6SiBBUEtnVGJKOW5FRTJOTTZlOENaQjl6UTc1eFlMQnFvNFZndnZ0Z0tMYi9lbXg0ZXJLTXdwQS9tMjFWcDFkUmZLIFlkS2VENVkyU0kyQzhxQy9rZz09IC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRHJkSExrYVppUzBWMWsgN0VFMEJYUitES3Vka25iTlRHUUhOdkxzbzBudXp1aGY2bFRoWVp0TDFXbzY4cmRwZVFmZWsvSzNEMm5mUkQvSSBQd2U5SVp0YzdxSHpCNjlFbkZHQXd2Mmk1Q2JVZXR3ak8xOUJnV1o5VVFMTjhSbXBVcmR3ZGp5VHpLclJOc0Y0IFQ0YmF1ajZWOVFWdnhpY1o1N01pMjNEVVRQWkIwZmVlanB1UnlkQzVUdWdEZU9EeThId3Y1UHFFVWZUek1LU2ogc21OWDN5TTRvTlVBbEtndTZRazlzSHZ6ZHJ3TmdWeFhkMUtJYm1MdldpZXJSK3ZrN0dEdS80UWtCdXllNlVpUSBjS0VVdEFjdW5KcmtSZ3lRblJCOXFFMnB0K1RZT2crREZJbWhBWUpEWXBVck9ZdGU0YXQ2R0dMVHdWVTk3OEJXIHlQangwUG5vcG5mMXpOMjQyeGoyUjFZYjJvZkkxbDZvekpkUTdUYkhUZ280bnQyT1JmR2lucG9xOHpXd1NLNmwgY3BKNEdaaXBCZmFKRHBBT2NzcE5lUkxBeDdHZGxHcWU0aUJieXU3ck81U0ZzSkhSbFg1bVE2L3JqbTZtLzBMZCA5Q1FEL0FtcTR6b2dMZUo2em16ZTEwT2ZETUtzclQ2UWNxODdsMWlYYW9Yc3VpN3NEUEZ1R3czemh1cWhxbXlEIHA5VXMya0hpY200c0dmMzBITjc0dmRJSVF4M3dTaWZLU0ZYSWczMzZUblZzc0NJd3BuZGwzRzR6R2hGSFdrRlYgbmRYUUtmaGRnbGprZ3JZUDVyMWd2cVd4ZkY1NWpXNkFyN0hndHdsbFhHMmlUUWUyTHgrd2p3Zk9LWVM4WWY3MCAxcGZZRTliN0VjczJ2dExTMWhlSW5MOE1DUUVMZXdJREFRQUJBb0lDQVFDQXhCbUZReDZXeEhzZ0UzaUJPNjUrIHRPMHg2b1NnTi9QSVlrdXVFSXNCV0JTTFIvc05telN6MzA0T1dPam5mTEpLRG4xQmtlTmpuODZGODdxR3U1ZGMgMW9DcENYM1h0dWwzMHF1bFpzSzVsMHRHMVZSOTNZZXdaeHB5aURWeGZYUW13L0xUSGE0WlpxbWQ0MWdyeklrbiB0MjAydUpadnUyQWpZd0VzaWI1dk5xWUdCNVdhd0ZVdTByRmVITUJnL0JYZWw0cE56UWg1NnhOUEZ1THZqbStUIHE1bHhqTnNCZEo2Q0p6OVNZWS9zanQ5eVVpWkh5SjdBcVh4aVZwM3lmemR2M1R0bC9JZHhUTUZMaE4wREZvV0sgLzBoU0tPRDhRWGxnVHlmUjltam51N0Q2RGNSSzBpbHNNc0REZDkvNWpzOFpvYmFDZWd2bEtIWDJ3RWdzN3cyTSBHcnZqYUkzTFhlTkVFMms2Wm80M0oyV05HRXpSelltSTFJS3FhNVh1NElJZmV5UGliOTJpQUFOa3VqLy9DN1IxIGNnVU5QV3c5d3VVaDhVM3k4bnJyUk5qaDRSRVJyTEVjb1A0Zm9UaU1DeWJQY1JUaXNWUmNwSDVjdHplci9BbkwgYmdhWFNTUFVyY0ZrU1dkK1Y3Tmh5N05xVUU3OEIyVUowSjZhS2dLdVhQTU9IcFpseTBia1VIMUVHQzA5dCtQdSArM2FJaVo2OVFwdURGTnE4RkdwVFF6TkNhMDg5MDA3RHN5UzhySHY5R0hVYkx5NkxRUTdaNnVHc2ljRThGVHdpIDlycGdldmQwSnIxWDh1NlFRSUdFT2V2bEhpV1hCWUtyY05sL1FJQU9kUnVGRFNCdGI4UTM4TEdiUFNXZWU1V1UgVG5OdEYvTUVLcmptc2lIaC9mUVFBUUtDQVFFQS9UYzN0a1d2K2FmRG1nOGk2WGQwWXR3eTZLb3kvWEtlWW1hKyA0YXFyMEgwVDVkZ0Q3WEloVTdCcWNZdytxdGt6ZXdER25yZmNyNzR6VGVsNUMwRVZqUWsvRXVOZFhYRlVGelpnIGpBZmZZRFNGTjlNVlZiTnNvWjdNWmFZWDZLZVZzUnc2Q2J2d3orcGNnclFHUGsxZFlMaURnQXVqUmJlTVl1R2wgd1haTjU2bzNSQlZIVjNMT1AwZmdTb0l0cnJyODNtaHlqUVVNWjhXZ3Ywb2ptU2c1bVlRZ3lPa1pETDdVbWFwbSBQcnVlY3BtZGozWnJhY0xReUtQaDA5cHJMVGVpRVpCZzUxVjhXZWkrRVUvR2d4OTV2SGtpMFd3SGZNdVBLQllDIGJwZHRxWUd6YlpFMmJSZ0dSSXBxODJVbEN3WThuOWRwVzBiV0wvRnpIWmdtRlRrb0FRS0NBUUVBN2dzOFlhN20gSHAxUmc1Y3I2Y2Z3N1oyT1pkb1BRWUVoYWNnUllEbzNnTmM0Ri90UmNjMmhhb2w0cDZMTDQwYlkzMUdCVG9jWSBaNHp6SlNleFdDaFpkZHJTcEhSQVZhK0Z2ZWFrMjY2Mjhwc1VhUE5ZVFZvUkRiNDdDMDZibGxFWUhrOWZ1NHVsIENEZFc1NGVpZUJkWU5JbCtSSjdPbDl6QzU5NUJkNlBoUkk5ZWJVandabTdkWDJkUlhSbXkrS0YvT0ptTW02UXUgQkd0NnVDQ0E4NHBqN25EbEVoS29pN3dYRmZybldYSlV0eVdlWXE3Nm5JNXBXMWRGendNV21iWVJHS1hISVpURSBWVVYvc3BGSlRJOUk0QmZIbTV6TlU3NDRIcFE4Z2VWb3JWRHlhMVJHZm5xVm8xVlRZR0dibXVXSG82ajIvQ25JIEhBZmNReWdZNnBMVGV3S0NBUUFZd0RyNzRCZnhhVXFmVm5kdEpyWURxODUyRzV6Y1ZVWFNESVQvL2ZUSmJsQnggbVFuWlBkeXdGNEJ3Rk90VE8rUGlWQk1XRkpiSHZ1bTQ1ZWRsQ0RtWkRaeFN0bEs3L1lYZ3R2bjg5aEFKa1ZpcyBPai9ObnJveG1ob1VuWVdjd2pUSm1SNjdNTm03R1FkdDV6YnRCQmJxaTE2Zk40UUFIbzdrWTNZV1VRQVFjdnp2IDlMeUNlY0JiUXlWVFl5SWdBRHNUYWxZNEhwUTEySVY3N1QxSmpUc0VISHd2NTBrQmkrMndENDNxOTkvbkI4ajAgNnZoWTRDZ1VWS0NRV3JzN01rTHZRSk9ZU1N6Y2hQbC9LN01Wd2cvZU1tRUs0MnBmOG0zTjEwanBrbmV2cC9QbiA4OWZFRmlNV3RBajhQWmkvV1I2MzZSQnRVYUZDRW5IVUpMa2tQZkFCQW9JQkFRQzV2WGlxKys3QldwMmRJUnI1IHVySktwbExUTkhnTTg3WmZ0T1dpQVNzSDFHY0hoMmxBZEdRTUhpSlFJNTRWeEZVNnczMHpDZ1RIMzlwbFZuaHggd21JenJNQUo1RS9DekVkK0t2YmVGNURXOHB6VlczTytQNVhvOUZOYitrVTY0Q0lDbklxbGEwd2xnaERFYmpnZSBucENMeGZFSm1DUzVxRjlJejBxa0VQS1lMWXBQbWNkREZpU1Q2YWs2RFBCeVFvbGpYNlN3V1VZeTJxNlI5NExIIEJXZitTSWJsT0R2ZGRMRkt6RkV5b1J4ckgrWmJPQStDa3ppd05nUFppSjVjNkF5ay84M0diUzlaSGZhTEhnUmsgd2JUcWJvT283NHZqV1J5dTk1blMvVzlWTlVGQzhDcGxURDl3aUFhYndPM0t5bWl4RWdsT0wwZmVYMS9GNHdhMiBHa1Q3QW9JQkFHN01ZRVhRdm1hUHI4SlR2TEM1dFhxZ3pPcys5bVEwQ3ltUk5kK2VnT2x3OFdxTXVRUk9JcnhnIGFMdCtmbTZ6VTVpRHNITzZzMUYvSHpONjBEZ0RyR1JYV2l2NzlOMTRiK3RVakJ1RDNjWnpjaE1QS1lXbmJoSXkgaDdmM2xDckFQV3RZdVpWRUUxY3JEcDRRY3crbnpjb3BDTmZiZlVtaitsVWdOM2hlR1drWlA1MHpHTGFNczdubiBKdXNFaUJGdGF2N0UvbnB0aGNBMzBEblU0cXY4VkY3Y1NVc0ZSRjFHQmx0Y3YydFhNOE9JWEZMRFlpdzNJTVhuIHJOeU02ZHJsTklkTkR0WVpLVTZKcm9LL3BDNi9Sek5yZDFrWjVoRjNJajR3S3F0a1BGWkUwcUIwaC9LSzNIV3YgSXh3SVIxRTJ5NUIvbXkyRWlmWE5ZMFVRSHdjS1VyST0gLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
        mqtt_bridge:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZEVENDQXZXZ0F3SUJBZ0lVTTVEWlZqL2liNVFPQlZ6YzhhZ2grR2NBUFFrd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0ZqRVVNQklHQTFVRUF3d0xiWEYwZEY5aWNtbGtaMlV3SGhjTk1qSXhNVEk0TURrME5qRXdXaGNOTXpJeCBNREEyTURrME5qRXdXakFXTVJRd0VnWURWUVFEREF0dGNYUjBYMkp5YVdSblpUQ0NBaUl3RFFZSktvWklodmNOIEFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFOT2MzMzFUTzlFU3pvakJOdHBvU1pwejdBdVVxcTZIU3dRSU43TFcgemF6UUlybjl2Q1ozWkxIVGhDSHQ3N29MM0ZvZ1BRd1MzaVNZN2hkUFpZWmVlT1owSWhMSWNoYWN0aVp0aStNZiA3aFNyUHBJemxTMVdHUElhbExYOXc1eGd0VDlzVXc5VTB1T09aNEFBZGl0TDhKdk9XU045QUJqSGdjb1ZzRWxPIEp0aFVac1pVNVlLa01VdjZrd2ZDa3VKZFZ2Z0p4K3A1UlpieksrSnh3TFowWVZoM0MrdVpXRjFWaVh4NVk5WU4gR1Q2V0F6ZGJ4ZmlmZjM5T1d3NVA4NVB3Sko0djJqWkg0V0wxU3Q1WUZTUGNxL1pINm9NTXhURzdRV2xJWXpmVyB4RS8xN0hKK0JmblBCaEdpL0dSY3hJSWRNMnF3YUVBTEMxZDEydFdqNDU1c0F4QTE2dW5sUUd6cUthV2lHN095IGEvZWdhZERTSDJ2Y0xySjZDTDdJbWtMM1lVOG1SSzVGK2JOaVNpb1pQZXVrMVlEVkFvemFBRDFpZFFxUDk1WmQgZkxya2drSlA4ai9hWWt0Z3VHanRvM1BEZndXR3M3enZmbi8wUC9ad0Q3ZExrTDhwK0VDRmVPa2NFZVIxa2NRSSBrQVlMQXBrZVVkL1F5aDIwQlFFNTNyUEgzTU5MTUk0d0xuMFoydmUwck15RDdIbElNb0RDUWtOQVQ2NWErNDVlICtGVEQ5dXgrVHBCS1NKQndLYnhrZERzSEt1M2R2OWRUN2wrbjNFQ2FWdGw1bitMMlFoRFl0NDIrNHhNblpQUlMgZ01zOTYvZ3IwTm5XZkF2NHRHVDFWTHVHdWQ2clhiSitHZ1NYY29JL3pKY0xPTHpxakZiMzhza0J1c1o1b0JMbCBlWUxuQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJTQWRzTmlWMDAyR2toREV5d0IxV0IydVAzYzF6QWZCZ05WIEhTTUVHREFXZ0JTQWRzTmlWMDAyR2toREV5d0IxV0IydVAzYzF6QVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEcgQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUJldWlmdHI5RGR4KzA1RDFiVkR6ZXNHelhXRHVKYlRESzVnd3lXaWI0RyBDVFFGaExDVlQwdit5SE5vVk91VTBNczcxeFZ1VlFSc28wMGVZVlVncGhQNW5jeVNkRzNJck83eTlwbElEMWhrIFUyb1RJei95THpFM050eW5ZaCtnK0IyMXZJS2d2eHVZTHdBTE5Oa2kzM0hKSXNQSjEyNTBKZVM1emdOdkJudjIgWi9qOGNGdzJhUUtPc0RHbDV0WlVETTR3ajY3Ti9MTzQyTEhZMFc3ZDdrRjg0MEhpRkE4STUvK0szSE5OcmlkTSBnaWgwME9uYzVFYStOMGVGTnFGUmNMWlprSXJKbHVIbERXeWpzUnZEQzV5cGcvNno0UXdPNk5yOExWdjEvQnNvIFNlc1NaQ3ZpSUtnOUhKZldpU29vaXU2VEh4MS9aMW1nV2lBTEc4aWJkTk9GSzFDc21ZSDBDa2J1RGh0NmE2M20gNFZaQjNTWnkzakwwY0pwbis5Ym5ha1U5UEpWelRDY21UQUdQT1JVL1FMRGxsSG1qTEY3VW0wYU5DWXRMRU9rSCBDM2FaSU9lUEg3aTRYaU1pVm5oTm1yQjg2T1NSZGk5ZUh4Z0ZWeWFoMnFoUU5yTHZpRkpVUDJuQ3dPVWRHODFrIFRhV3c3RlpDdnFmTWxGYi9tWVFpRTFTZERLb3Q3SjNQL0pjWmNLa05HbFByKzY2b3FrTHlKTWtFc3lvRy9ValggS1lLQzFjVW1UNTVoaTBPdkc2eW92M0NDWm5DOE03UjNKK0pkZXEwbm5RY3FQbStiUWZWL3Z2OEpINGY0ZjYwQyBBVE91ZDFEL1Y0eXhxalpnNS91dS9YSG5FS08rVVp2THp0Wk43WDNTMGxjWHBJOUNlRkE2OVcvUXBJRDk2TThnIFRBPT0gLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRRFRuTjk5VXp2UkVzNkkgd1RiYWFFbWFjK3dMbEtxdWgwc0VDRGV5MXMyczBDSzUvYndtZDJTeDA0UWg3ZSs2Qzl4YUlEME1FdDRrbU80WCBUMldHWG5qbWRDSVN5SElXbkxZbWJZdmpIKzRVcXo2U001VXRWaGp5R3BTMS9jT2NZTFUvYkZNUFZOTGpqbWVBIEFIWXJTL0NiemxramZRQVl4NEhLRmJCSlRpYllWR2JHVk9XQ3BERkwrcE1Id3BMaVhWYjRDY2ZxZVVXVzh5dmkgY2NDMmRHRllkd3ZybVZoZFZZbDhlV1BXRFJrK2xnTTNXOFg0bjM5L1Rsc09UL09UOENTZUw5bzJSK0ZpOVVyZSBXQlVqM0t2MlIrcURETVV4dTBGcFNHTTMxc1JQOWV4eWZnWDV6d1lSb3Z4a1hNU0NIVE5xc0doQUN3dFhkZHJWIG8rT2ViQU1RTmVycDVVQnM2aW1sb2h1enNtdjNvR25RMGg5cjNDNnllZ2kreUpwQzkyRlBKa1N1UmZtellrb3EgR1QzcnBOV0ExUUtNMmdBOVluVUtqL2VXWFh5NjVJSkNUL0kvMm1KTFlMaG83YU56dzM4RmhyTzg3MzUvOUQvMiBjQSszUzVDL0tmaEFoWGpwSEJIa2RaSEVDSkFHQ3dLWkhsSGYwTW9kdEFVQk9kNnp4OXpEU3pDT01DNTlHZHIzIHRLek1nK3g1U0RLQXdrSkRRRSt1V3Z1T1h2aFV3L2JzZms2UVNraVFjQ204WkhRN0J5cnQzYi9YVSs1ZnA5eEEgbWxiWmVaL2k5a0lRMkxlTnZ1TVRKMlQwVW9ETFBldjRLOURaMW53TCtMUms5VlM3aHJuZXExMnlmaG9FbDNLQyBQOHlYQ3ppODZveFc5L0xKQWJyR2VhQVM1WG1DNXdJREFRQUJBb0lDQVFDdzZ3N09zSy9wOUZkSWJvRjF5SXNBIDNyb1NWSkQrcVk1R0tMaW9oSDRnWlVNalRNZnBRUmltczdoY3haa1BhcXNuanB4N1k2cmwzaFh3MXlpQ1ZxbXQgd3BwYUtjdDRyRHg5bEVqSDh3SVJ0Ym55Y2IzZTBZUzVwUTkvdUZHNmhBQUVyb1FpNVVBTGtCdG9JUHFxNkNxWiBtTU5kc0R4TWUwQS92REpPbDFCU3ZQM1FBMXAvQnRkUU5vYUdqbDVQY3NvclJjSW1mbzEzem9aNkk3Q0Mybm9vIGhCOHJNbUYyWnZVelpDbmI0OGVmVTd3TXBHVzNuMkh4QlltTFJielhpb2FTMmw4TjByclZDVTgyNVYySFJnOWYgTUhFWWI2ek9EMGg0eFZSdWN0aGVJYlUxWTdlTFMxSS9uSXgzUERmdXNJczBQNWhwTXRLZ3BKLzR6YlNYMXFZWCBlamIxbkdBdVZsbVJwUjh5ekpvRTVRbVlkV2tFVWw2NzB4VWNBN2QvQ0VqYWJ6OG56bGwxMmFDQ2dOOEg3STNIIFNKMC9yby9YaHlzN3lnZDVXb3gxeE9XOVpBMU81RVI2cnZMblZRdUxhRmR4SVU5SzBIVEFtMnNjVVhLWHRhMkMgeGhTcXZkZEg3VElUd1RlZ0xtNDFrMFQ2a3c5VzBnenVJdjlNZ2Z4cy81Y2pGc0pEK2FLSFE5M3FDWDd2eGI3UiB3YUxxUFZiZUg3UDZJVWZvZkhzanp0blVHNTc0NGx0eFVMZkRSVjUyYkhWZFEwdDVYYWZIdjVRalJUQkpKRWY3IEJvWjV4SmZZN2E4elI0U0lONFRpcHNQYVorcHNzL2h6RmRwczRhY2pjTTB1Y2JKRjFZTFBYZGpUdkFiZ292U0QgUEtkWWpYM3B3QjVSMHY5Z3lxSDV3UUtDQVFFQTdhdG1vSFhUSE5ZamptZGdKNnBiVGN3Q1BPN1F1eWdxOFBJaiBrSEE0UkEzWGc5cG5JM3R2RkpvYUx6V0hBbnM4MWxvTldlaUVTcnZGcktTY04wZVR0SHdmUnp3bVl2ZXZpeUJ3IEo2alc0SHd2czFZOGxyNXl1TjJienhGT0dGNkp2OXRSYjYvd3ZuRG8zd1pUejBmNW54YUVvNk9vOUpaQ3Z4cU0ga0ZHbW9lUWp5aTViRDBqUDVJcHpUN0syNXJFMDlTWHd6VElQR0FtWVZCeUQxUUZER2ZvaTBSR0RaR2RtZDBwRiAyd0U0N1JJREZCSkErU29Tb1lDcTZmWjhsajg0TTdock9oYXZGK25pb3VZY1JCUmIrUHdUTnhDSlpQTEgydE4wIFVCNEFZMXd6a0FyeGRLdEE2cGVEWFpWTHRLTmJ1Witpd1dKdFkzY1lkdmRtei9uRHN3S0NBUUVBNCs4QWdZRE4gODJvZkpPNThoeElkZ1NpanR4V21Cd2loaXJxRENEckdNQ3NNbng1VXJWaDFWQi9XOGJBai9jb0xZQUdIeDhrTiBSWnhUTGRjTjRBOVRTWFk0MFI0NFZVWmJkRExWOEFQMGhQU1daR09KaXZOVU5pSktNdUpWdVpUKzhEb1ZyeitlIEU5K01jdDdiNFhPSmw3ZUplS2MzUTh2TGU0LzNjT0hLbU9OcTJUdDhxMjBOOHdVR0lxQjc3cmkxZHZKOThLWEYgNytYNnQyOGZ2N3dWNm5BTC95Znl3OFZXZURhNHErZEZ4NE1pOXFQWTYwT0NaemovUE1temVKV1BTMVZIaG95eSBoVXVqNkpnSnJNNTNYUHBheWxlaWtlR1lFek5GTmt1WjhtK0FSdkNRb2pyUzdCai9kWUptMXZPeExJb1R3KzhBIGRwR2ovS3crSlk3NS9RS0NBUUJDUE9mUVJxWTh2aTJRclp6dDBSdTdOZVZWeUJVaVpCSjdybkJjKy9taWRkMGYgb1VubmFLcFBxcGNybXhaeWlaZ3VBVkVCUXIxRCtzc2Z6NHkrRjFQQ0ZHbS9ON05YRjhLejJxbUhWQlgyNElXRyB6THo4SWozazZkWlh3bkhxZHNhYlV1dUNYaDJSWmZSdzI5bVZ4bkI2ZHhNbWJDRlZjVjlPMVg1aFpuQXpaRnJaIEtVdzFtVXhmWEhyQXRvVWxERFEvTW9ESEgzRjNlSTBjdkFtOTNxa3Qzem0rM011cXV1cWl5bTlubHhLZmQ4cWwgMkdTRlRNVitmMWFpK0JCRzYzMmxaSHQxNkFhS2VxT3dWTU9COGM2a09OUytIdnk3eHJJT2VhcEwvZUNMMEpHSyBUcEoydXBmUUNjUVIyOThLakJDdlRoOVZHREoyYXlYRldqUXNPR2JqQW9JQkFRQ0U5L0I3bkFDSmQrY2pURjBwIER0QlhnTFhCSU1meVluNmF4Nk9aTVhCY3VVQnJzdTRERWcrZ085TFF1OGpEVFJMRnR4N1cxZHNBT09udFcvK2sgTGt5UUZuK2V2dHB1Sk5WRlBFTEIrZ3l6WTF3NHhEaUE3dUs1a2RkblI5SnFxUmp3VzNJN0FnbmQzaE81RDNtRyBWRGg0WVlHNCtST3NZVDhibmlqam1WVHZTL3dSTGpyVVpwSTBxMEdoQWE1SzNVWS9WY2RTaytLY3lMVXlQWWx2ICtQRndDbDExUklEQzVHUkZUT2Irb2JSN1oyMEdKUjl1WDd1N0srejZNVkNaaitaQU5FZTlubWFtakRIYWhwZGUgVURRaDhZcjFiNXBQTUNQZlQ1R1kweEhEOUhnSTZsMzF4Z3MxNEg5bXRlUDRrY0ZTRWxybGVvL3ltNVBtMnpTRyBCSnFoQW9JQkFBOE42WU40SDBvQzJibGtNQlBOUlNERU1ybkFjbmNFcGhUT0tVOHg0WVAxMHR3MXFBY2lNaU9FIEJKeWNuUmlDMURQZWhodVpvdU1Kc3h4R2Y0TVBHU1hpV2VFV2Vtbk1TZnNlU1VLUVVFYVlSdi9oZmtDMnZleXkgVkhhNDBqRkh4VjZEUWNSSURwRHYxQUxneDhPVjRZWkxhQWFYbnNmVWtuSWpRU2gxdndBM0E5ZkhnSE52NTRyTCByU1liaWhubXROeEpDdXhZM0J1bFY5aCtHOVNoMXpxR3lQaTVZMzJ1TjFPRXRydVpCUmE1eEFuZVhPVWNPNC9RIDRCbUN2cWdCSkRIMjBQenk5K1JmNkJBUHpacU1uRHY1T3FNK0NiMHFMQmhXYmR1YVpjbjBLa2hwWTEvK1Z0QmEgSk52OGtRNG9YazhDZHZBclV0cm5mSVpiWE03QTg4ND0gLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
        sensorconnect:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZFVENDQXZtZ0F3SUJBZ0lVUlBjYktsYkVSZHNJOWpkdTI5b0Zzbm5QQyswd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0dERVdNQlFHQTFVRUF3d05jMlZ1YzI5eVkyOXVibVZqZERBZUZ3MHlNakV4TWpnd09UUTJNVFZhRncweiBNakV3TURZd09UUTJNVFZhTUJneEZqQVVCZ05WQkFNTURYTmxibk52Y21OdmJtNWxZM1F3Z2dJaU1BMEdDU3FHIFNJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUNkV2FVQzJIa202MEVUejdHMHBYQWtzc3VZd0wyZkhRdDIgVFJQS1ZjdndYREVERnlqeGo0TmZYdUpmMWh2VmlqMTR3R2w4Y1RMVmZVdFFpOXRDUkNvdkt2aVhiQ2czemgwayBXcGltRkZ0eFZhamhaSmxYRHpqSXZRR2EwZ0hqQXlhMGN5MUVjTzFoOHdRTVljMldaQXAybjFmc3F5cWJaVWhHIE5nSmxLQ0VmcDJNQVBlalVrWGJIV3JlY2FiZGk4dmJXVE5BU2hWQzRCRlFPdWJJSzE2ZUlhMmJCaFExYjRuTHkgeDZHbUhGTnhRdGgrdnVnNHE5TjN1eEJPOS9pS2p4MjZoSjE3aGhiOXhoSURVOGNXRjBRTFdGdTdJSlNOeXZweCBoZmcyNFMyMlh1S1dWMlEzV1M5NWdNYUxab3pyWVZRSWV5M3RvU1RSbUEvSW5Zd2VrL0MwZUhkUlFtYXQzOGpEIG8zOGFudXVhVkg4UTh3RE1QOHdJNG90UnBQL2V1aE5pcEFwSTB5RzJmcHlRMkRUY09SM2U4aW5oVWZXRThVZDAgUkJhL016M29lSmRqS3VSMDFYLzIvdis4cFBDZldJcXN6MFRIQXFaQlpkc3MvWmxxWWZ2VGJOVzVHTEc2RjhsKyBjcEVneUdhdG05cXViL29JRktHU0lRbGVFUEJwYS8rQkZtazVPN1haVWR5SFRCSmZXVjVLazdobFB6d3NkSENkIEdROU1CLzg1Y2FHYXBteE1KVzM1NWhQdTFBY05COVhQRzlleHBPdWVxQld0SzFwWUVEa21VVm4wMjh5bjFibzUgaEYyclY2aTFNK3g4RjcydDE1a2NNS1c4UHVYSlI0disvSzVOaEVVMUtXZUs4amtZUGRCeWNUY2lhazczQTBUUyB2bTN5eUFBQU9RSURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVSR1AwUGRNTUxQTE1xMHNYYlJiUUpFUFhNUEV3IEh3WURWUjBqQkJnd0ZvQVVSR1AwUGRNTUxQTE1xMHNYYlJiUUpFUFhNUEV3RHdZRFZSMFRBUUgvQkFVd0F3RUIgL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQUY2UjZ4NnUrVHhUZzRtLzJObllCUzBvSHdockx2WVo4QjJZeCA3QVZTcU9yVTczcnh6WXVJeFgyVWVPQit5MHBzc0l3ZmI5YzVmMlY1aFFoZFI5Y21UMXVNbWJVcTA5T01nUlNBIHFidkhzKzg0cTZrZXl4akdJSkRmdStHS2hnUysxNHNINWVMRFhOYkJBUSs5U3NkeXdQdDQvdXlncGk1V285Sm4gL2lkVzZuTHp5RzFhS3VodmNOV1FrYlZyMmE3VUdNOXB0MTJ2UXhlN0pjWi90MjhuUUEwdXZvbVZwZWIwcWZ6aiA3cDgvL3R2d3VnbURHVzM1QWlVaTRabWYvc1RoT2UrZG1rZERZdDFseU8rSkFMZFp4d3ZrREtoU1pFNWtxOC9vIHNqallRRmRrb25scStSRm4wcEQ5WnhpTjhPM2ZFSDJ6MXJ2a3RPUXhPa1cxZXoyeFlvaXM1T2FHalJIZysrTzggaVBnZjZ6dmFvTGJ0Mllsc3hoaCs3Q3B3SHM0eVdXZFdjdllUZVJ3ZU4wR2x4dm92RDdmUGtRMUd6ZWd6a0ZVUiB3NjY3SVJ4ZmExSnYxT3Y0cjc1d1F1RHJtYWI0aEpWdnFIK0dqODRDQUhQN1RackZuTFNVS2l0VVJXUDgwNm9tIHAyWjVLZlBHT3I1ZFBTc1lRK1hMdi9SU0pObmlTRXlpUHFUaEdBR29HbEI2Q2NZeGpGOVFnVVh5dVNYeElSMnAgTXRtVkJLVWQ2NUFYNXNOckJycmJKMGo2UkJ4TEhES0JkM1hSM3lmbHdzdVk2UFN6SlBIOStLQnU5ejJVYjJINCBXVGVHaUFvUUt2bVFxc1RDRGphdWR3elp6RlpQdHcrdXJESEtoMm5ibHBxK0lqQjJITjcvMUt0OENTcm1vL01xIGQ5b3R0RVE9IC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpSQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1M0d2dna3FBZ0VBQW9JQ0FRQ2RXYVVDMkhrbTYwRVQgejdHMHBYQWtzc3VZd0wyZkhRdDJUUlBLVmN2d1hERURGeWp4ajROZlh1SmYxaHZWaWoxNHdHbDhjVExWZlV0USBpOXRDUkNvdkt2aVhiQ2czemgwa1dwaW1GRnR4VmFqaFpKbFhEempJdlFHYTBnSGpBeWEwY3kxRWNPMWg4d1FNIFljMldaQXAybjFmc3F5cWJaVWhHTmdKbEtDRWZwMk1BUGVqVWtYYkhXcmVjYWJkaTh2YldUTkFTaFZDNEJGUU8gdWJJSzE2ZUlhMmJCaFExYjRuTHl4NkdtSEZOeFF0aCt2dWc0cTlOM3V4Qk85L2lLangyNmhKMTdoaGI5eGhJRCBVOGNXRjBRTFdGdTdJSlNOeXZweGhmZzI0UzIyWHVLV1YyUTNXUzk1Z01hTFpvenJZVlFJZXkzdG9TVFJtQS9JIG5Zd2VrL0MwZUhkUlFtYXQzOGpEbzM4YW51dWFWSDhROHdETVA4d0k0b3RScFAvZXVoTmlwQXBJMHlHMmZweVEgMkRUY09SM2U4aW5oVWZXRThVZDBSQmEvTXozb2VKZGpLdVIwMVgvMi92KzhwUENmV0lxc3owVEhBcVpCWmRzcyAvWmxxWWZ2VGJOVzVHTEc2RjhsK2NwRWd5R2F0bTlxdWIvb0lGS0dTSVFsZUVQQnBhLytCRm1rNU83WFpVZHlIIFRCSmZXVjVLazdobFB6d3NkSENkR1E5TUIvODVjYUdhcG14TUpXMzU1aFB1MUFjTkI5WFBHOWV4cE91ZXFCV3QgSzFwWUVEa21VVm4wMjh5bjFibzVoRjJyVjZpMU0reDhGNzJ0MTVrY01LVzhQdVhKUjR2Ky9LNU5oRVUxS1dlSyA4amtZUGRCeWNUY2lhazczQTBUU3ZtM3l5QUFBT1FJREFRQUJBb0lDQUVwTlFZbGxkVmcyY09XTkJ1bzUwUW5UIFVDYlNwUGdVdkF2aCs3MW81RU9kRlJ2VGZPY01rTW1oUVo1bHVZRU5wVmQyN0pqeHowSld4eERDNmdlUnJxWFYgVWN3WEs2cW1ic1p5N1hCSFhxTFhBMGRqdkxFS3BCTE9oWXA1THFEbkpRakM5cFpDQ1NaZW5nUEd6MUQ3N3FEeiBQNDZuaVJnV0xKblMrVENSVVlyai9QRHBTeC9Oak53NGIwbXg5Z0lJbnh5MDZ2QkQrY2piYW1JRnVCZzhtNFRrIHlvSUpkVFIxYXpoUG9ucVJGNm45R2NSSUc5cGU4UjJ4dk5LOWI2VG1UZkI4bk96dWRiN2lJREZvQnpQY1NxcGMgei93K04wZjVtR2V4RG5QRHcxVkIyeGVKTHU2Zjg3WVpaQ2dCaGZ2RVd1MGlWWjdIb0Y1RXd2ZEZ4aHZPV2pQdyBra1EvL3YvSkJ6TmpYd3hvMytEa0hyUlZFMDVUNzF4RkZ2V1RSR1hmRlYwOFFGSkxOYkU3T2NBKythTnJhSXVCIEw4OUEzK2JTZWJDRk1yTjduanI4SGZWSldHV29EV3R2K1M0TFM3MEdMTVZPakNHZUFBbzZCQ2tqSzJjcUhmUDIgTk9FNTlob2JuMHcvR1oxK3B2bmJ1cjRFZElrRmtaUnRwbU1ZSnl6K0cyWGsxMksyYmlGSDVwa3d6bGtkWXZVKyB2cDdPNjRLbjJmMzd4VlQ5R2h1UWRVbE1vOE0wZ212MDlQU3RXNUxFU1RsZS9mVnlKOElPckdqL0YyMytGWDdMIGh3VFp0Y3F5bXBxdWU4OXZIRVBuVlBLdXRxNjNYYTZCMG9OU01iYkV6VjhWdDN3WkRJUEVFcmJuZkRUbUFDbEQgK0huUzZHODh1RzBGU2lyVENRSXRBb0lCQVFEUmJQTWZ6RnpWOWJGZnE3eTB5akVNYUZndWUwVlZ4b3VYRjFpYiAzeVE5Wm0wYXJPRUlxeWV6cm01VnJDamFqZk52N1Y3bEE5T3BSc3R5QzROM21GcnVrSzRwVjJwVGJRa2F3Vkd2IHZDcVlnNHZGWVZtMGIzaHZ4Ry8rb0VsWm9XZE1BTVJWSVk2b3dhdXMxVzB4dGtwMHVDU1VtWisra0VQblBYVVMgbnNjK0hDVnN3L3AxU1NrZ011aDBXZkUrV3VENENuMXViR3pzNEJ5RDhYeUFaczAxUkpRbHNad2laeGVDd1JSciBRbk4wZXgxWnBWKzUrcVUxdnBLUFdtSGRiYnlpdmRucmZFQ3RPSlBTSzhEK01RVVpBVDRCOXZ5UytPdGs1OUlpIEE5QnBya3NlWmlzY2hCNDFkdTZRTmVBajFrTU83VHpoZnowbDRvd2pub3JsQlJITEFvSUJBUURBViszdHhDSm0gUWgwd0U0Y2sxZ01VRjg5WUpvQTJMNjBPQTNEQjU0UklsV1d4d09IcTF6VGtHa20yMHRVNkpmSUhpbGJLMHZqWCBURHdBSW9GMDhEQWlnaDNsSjdLK21kNm1vclc4RWhEYkMreEdub3IrVHF4YkE4c3IvRzFJRXJPaHc0Z0FrNFR6IEZiQktZUk1XeS9xclIwa21iUDV4WEdSMXBjQ25WN2g4cjVsT0lMUU5QR2ZneTJNS0hsZ25QVEpySFVMcjJja3UgSXZSdHJpTktXdjhEWG4zWXVuMkVHZW94bmQ1YVBXb2FRZXdFbUVlVGwrZmhsTDR1Q3NvUitZWHFPSW11Vm9FbCBiMWpGcDhscklaVVhhYWlFb1FScmZsbWRjMDVvVVJGMHBwRzhoc1hveVkvYXg3YVlpS1dNb1N5SGFIOUphVDJPIG1pZ2RvQlJlWnlXTEFvSUJBUUNjc3dXem5FazJldkV1SWFWQUxTM0lGK2NyV0dkSHlCaTRnK3AwTHVIQjQzcnQgZzcrWnFkODZEZUZXejB0K1JNcUt6RFM5N1VBWm4vUW9NRDg5WkUxZHhmbmF5eUt1cTU0dFc4c1FVQjRiSWdxYSBOTDVYU1RUM2hDYzhnWmlBclVsS1VDU1hnbFZwSmdpYmVOS01hTmFMUVNGMTR3RHBLSzcyUGtEMEhzUDhVRGtjIGlnTkVjT3FKd2kyMnFYbmQ2MGY3c0hXc0F3cjVyck1IY3RCeWp2a3F5MWFDWWNQdTVlNXNrcVlCbjZZZDJPVGMgSitaWmxSYTdBUTVPbnhVdEJxZ25xU0IrbCtrWTg0Vi9zK2RqQ3pEQ1JmQ3NyYTdORmQya0VlVmtPREJnY3Q2WSBMMkJBcFFhcGdJVCtlS0Z1anlwNzU3MHZDUEtxL3psV2laRnB6WUpEQW9JQkFRQzFmd05MbGdUanUwVXhoV3ZEIHpaSlFGbnVYOFpTUURRTGVNMDdtR2VHUVlERDZ2MGd1d20zdFJBVUUyQU5PZ0ZuVzFhbzZiME5TWFdSTXVFS3kgSnFjMUdOUysxR3Z0UU9LQkdRNGw3bUlyWUIvUEwzRjJzS1FncWY3QWZjeGM4eEMvOXZMUm9HSVd3d043M0FnWSBQZGhHWU5qY3dvS0NVNjJUK2hsRmp4Zk55Q0VBUVFuRlo1ZVozakdSYmJxL0pCYjhUanRFdEZnTENmN2R0REVtIHk2RFEvQXdDUTArSEpMRUJxcmNUTGRwOTluQ1FrV1VSRjRrK0tvNGVnaDNWUWtBa0dMK0tXNlEzdjg3ampBVWEgNnpCMVRFVXhDWU5UTDRHK2VmeWxvTUc0OGlpWTNnL0lMdEpvbm9WbGY2Ty9oS0t4RDJEMDA3SzdhaW1xY3RCbCBtQzByQW9JQkFRQ3JDcmV4VGJ2bGhENlpTMHNqSUg1ejFCY0lGbWtJZWZGMEdqNGRTc3JDYm0rYmtqaDlpb0lhIEJiYnFwZHZ0VXFIZ2plek9mNXUzeWFPT2xhazkva0JuU0RHYXI1YnIvNmJXT2p2cTI5dXF1d2JISUhUcU4rU3UgZGQ5cWI2RWk4bVJwRW9meDc1UUU5SnJyZjNaR2puQWxQWnc0V01kWThWQWQ5dnZUYmlTTVN2L3Mxc3VnaksrYiBKMEE3RjdmZGk4SWlvUkhKVTZqVVArSFBKZjl3MDlkVE5oTy9GWEtKazNzR0d4V0NXbmxUMldQU3grNk9iVW9xIG1Sazd4NG83Vk82Q0NoWFNFSThMaVBISytWc1JrWXVPa3hUMjIza0RTMVBkTGp0a0VrZXZoeURIbHV2ekdKS0sgMzl0ekFhYm9TeC9PTS9vYVFiZUdrNitUK2ExUmhxd1kgLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
        iotsensorsmqtt:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZFekNDQXZ1Z0F3SUJBZ0lVYUNyTmJOdnp5cTU1T1dpTmFvQitjS3JVSWRzd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0dURVhNQlVHQTFVRUF3d09hVzkwYzJWdWMyOXljMjF4ZEhRd0hoY05Nakl4TVRJNE1EazBOakkwV2hjTiBNekl4TURBMk1EazBOakkwV2pBWk1SY3dGUVlEVlFRRERBNXBiM1J6Wlc1emIzSnpiWEYwZERDQ0FpSXdEUVlKIEtvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU5rNmU5a0F1TkVoTDA1ZjU2Y29MODROT05vT1hmTSsgZHhHdUZWRnhSM1c5Ui9nYXJPWjQzZ2ttZ2dkN1gzZHJjT2Q1QTNrQ0RCeDBISHo3UUdSNGNvUmZtNlRqVGcrRSBYYUU4ZGg3UnE4SWpmbVlMWXF0b1RKcUdvYnZhZkJjb20wcm1wZnpnSEhiNVJuUjUyeWJPbmhNeW1vQ3FjNlJZIGZyZWwrVHhnZWJDL21CWW5nSUVSVmxUNGpUOVBaVDRvSHRScW9HaytKRVZkYXBsUktIb0xpbjRmY0tYZVp4RGYgVWV3eWtLazdqaWNHMWJjRkRiait6dVlJdUtRMitlM2FXcXQ1NEthblV6R2t6SlV0VG44VThKSCtOblR5cldzNyBPV25SeXNpVmhjaEd3Tk5rb0ZoRXVmZnNyeUVQM2FaWHNLSWN4ZFl3cmdqdGJUVjNORlpMYkkvQ0RjamtIY3lZIDQwZ2d2L3hyRlhyOGx6RURTSExTc2RGV24vcnk3VzhqeEFSRUQ0VU9US1FndWo1K1gvcDhncHc0aEVkODNZZVEgWFpRRGdocUVHWWpOT0RuZCs2SGxTZUthZHR5bEh1V2pYT3JGMUlMYmdGTEoxMkx5TElpWWdUUE81T3RUbkg3byBHTXhyaHJ5Rk5GQUNRakJ3dHdGRmorOVM3NG5iZVJjdkRvd2VJUFJabWZJbVJzQjFJbDdVL0gwYzN4amVMUHNKIHQ3U0lQSXpTSkdrUE5GT1Qxa1dHRDlVMzNaYXQ5VkJ6RVZjc3FsRmJaVFBPWjc2YnRrd3RCREJLNVB3RFM4ZjUgaUtuUVFBZVhUYkNmdUFmNEVTOFlJeWNXNmRBN3ZQQmlmWWtGNDZUVlkwNkZ6NHpHSjAyZEZ4bTRLSUdRbTNaRSBqSGdmYmZydHV6aEpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlRMNk42Tmsvam0xSzhsUitKMHp1YVBwKzFsIGJqQWZCZ05WSFNNRUdEQVdnQlRMNk42Tmsvam0xSzhsUitKMHp1YVBwKzFsYmpBUEJnTlZIUk1CQWY4RUJUQUQgQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRREVrRXJsbEp1clMrU1JMT09TQVZNU3lPZ0hKSVpZZ2NySyBGWlJEa2M5TXF5STMrZEtnU1l5T0hjalhsb3ZEenYwWmozbWo3NFRZanhxZ01BRkc1SVJxNlZDZHFHQ3EwU2wwIC9McU5lYlFFbCtKRGplMmNJMzlNQkFrRDNUbWJwQ0lHZHJtdXY2SHpiR2dmdGZ5b3JPUnFXVU1NdGF6ZlF6ODYgWUVpdEduTVhycjAvKzFMNno5Rk5pdFRZRTZ3SWp0bEdwUEp5QWNneXUwaWU2RTJPMWVpWUpuZUgySDBZM3lYWiByZHhEbWQ5cjBrRDF5NzJoVkxPaDU5alIxZml4M3orNkc3b0Q2YUxYUFRPallHM0NXaElJS0djeFM3MjB0RUhzIHJadzhJZXBWbzhXUVF1bW1nYU83cm4rM2ozZFVJam1GZ3ZDck1YT0FhYWJoeTJDcmFiYnpEM0hRY3dwTUhCNUIgMFFIYTgxYkNJMnlDbVhEdVJuSzE0N0V6NVJ4dzArMWYwNWdrbHplK3JENCtBT2xSQ2ZZSnE0ZFJ2SExyRUZEWiB1eW1URERaajhWSFJkMFpwUFV4Skt3d3hkb3V6TmdaUlIrZWJ6NGRxSTdSOWh5OGxxY1NETjNCenZMaDl6bDV3IFJBVzFDeTgzeW5HWVU1QktqU1NFVmFHeFQvazIrUlA4ZG1KMXlkOFZrMkJOSmdkTk1uMHFOai9aK09sWWtaVlUgNlcyTEdMZXB1cThXV3RVWkF1Sm9sTDFra2dFOFVYaFBtZlA4RkJvMVJGTXN6V0tCN050T21oSk9NY3RYbVlPdSBYMXZwcG9QaUV5U3ZKNHNhdGxHNXFOVFFIVERMb3dzN0RrOEFZR0NleVJFN3RmaDZOV214VDFId1MyOFRseFM5IHFzaHZWVWJ5MlE9PSAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFpPbnZaQUxqUklTOU8gWCtlbktDL09EVGphRGwzelBuY1JyaFZSY1VkMXZVZjRHcXptZU40SkpvSUhlMTkzYTNEbmVRTjVBZ3djZEJ4OCArMEJrZUhLRVg1dWs0MDRQaEYyaFBIWWUwYXZDSTM1bUMyS3JhRXlhaHFHNzJud1hLSnRLNXFYODRCeDIrVVowIGVkc216cDRUTXBxQXFuT2tXSDYzcGZrOFlIbXd2NWdXSjRDQkVWWlUrSTAvVDJVK0tCN1VhcUJwUGlSRlhXcVogVVNoNkM0cCtIM0NsM21jUTMxSHNNcENwTzQ0bkJ0VzNCUTI0L3M3bUNMaWtOdm50MmxxcmVlQ21wMU14cE15ViBMVTUvRlBDUi9qWjA4cTFyT3pscDBjcklsWVhJUnNEVFpLQllSTG4zN0s4aEQ5Mm1WN0NpSE1YV01LNEk3VzAxIGR6UldTMnlQd2czSTVCM01tT05JSUwvOGF4VjYvSmN4QTBoeTBySFJWcC82OHUxdkk4UUVSQStGRGt5a0lMbysgZmwvNmZJS2NPSVJIZk4ySGtGMlVBNElhaEJtSXpUZzUzZnVoNVVuaW1uYmNwUjdsbzF6cXhkU0MyNEJTeWRkaSA4aXlJbUlFenp1VHJVNXgrNkJqTWE0YThoVFJRQWtJd2NMY0JSWS92VXUrSjIza1hMdzZNSGlEMFdabnlKa2JBIGRTSmUxUHg5SE44WTNpejdDYmUwaUR5TTBpUnBEelJUazlaRmhnL1ZOOTJXcmZWUWN4RlhMS3BSVzJVenptZSsgbTdaTUxRUXdTdVQ4QTB2SCtZaXAwRUFIbDAyd243Z0grQkV2R0NNbkZ1blFPN3p3WW4ySkJlT2sxV05PaGMrTSB4aWROblJjWnVDaUJrSnQyUkl4NEgyMzY3YnM0U1FJREFRQUJBb0lDQURpS1VtWC9IQnZDeVc5YTR3N05GUFJLIDJMdFk5ZmMwRVFYWEM5Rnc3S3FtbzY3ZU1wYWlheGh5bjNHWEdSZ2FMUDd5cm9hMms3UnNQR1lEZDVVdkRJK0wgMnhVbDNOR0pJRjJ4UVFWd2lZWTBldGZRcXRQMmg4bkl0UndTR0M1bThWU2ppQnl6c0hUL0dPbUVOaGg1dXdkQSBLcHJHd3ViSjZlR2ZINm9wYWtNbyswcjQ2U2V1L1l1TVRpZG1ZUEcydTUrS1NVcGJWRkdCcVJkUzJuZzV2TWhyIElvVHB5R1hKMnFiaDJtbFNDUVA3Y1hEN3JjQ3pBZU01N2VWQU1mbEkxa1MvcWt0MlRkOGtCK1BrTVFRK3pRY1MgNWRXMnZKQ21qNkVOYS95ZGZuN01lN0FLQnZveW1UMEFxK3l0Rm9JUFhQZzFDUUZoRmt0WWtRNVRncG5iYzl2VSBXM0U5MEU2Z1ZqbXJjV3V0eFE1aXphU2RTS21lNWtkOGRlTVcwRlBBbzdyeGJ4ZG1OUkNtTGlob0tDMG5HaVRIIFUrOWd3U01VT3A1ZmNmNEFPNzNSTGI1TVBRa0ZHU1FXdlY0Q3AvU2QyWUNpbndJKzBZWDdFZDNjYTBSRkdjTnEgUzZNOHFVY2VYbjI2Y0MycUQxR0FtdzdoTDl3a3Y5TXBNLzYwaGgvaTlHTm5UY3F3Tm16eTdVTmVNS1JUazJxbSBya3o2WVlrS2RnTVIyT3FudFNOelljSDlUMGEyQUk5YTRhU0xpQWNaY2lQWEVVYmI5T3g4L1dVWWt5M3p5d3R6IFlIcVZheGwxZkJDc3RXa1NSRStxNzZrTWp4SXFLd2RRNzVGZHYwaTArZXk1UER0SXhvNWdTc0xzNXRIMFlPc1MgbGM1VGJobDBSNlZiSG91Umw5MkpBb0lCQVFEd3JxUU4wKzc5UEpXQzhkL1dkQlRxbFNXdmRjR0lIZzM5bFpaayB3T25PcENEQUdsZXoya3Y5U2xMQ2lPL0pZcFM1ODVkZGZaRG01K3kxZ3hRTnZYdGs5bElWVVRjR2wwSGtEUVhSIERPWFhrSUs1amxxbGpyOEQ5OXRUakk4d1doelptdXdJQ1grTVlkSVd5QmlUeFFUWWx0NnJOZmhOajUxNVNSZjkgYk1zS09SWUhjY1BXRXZaV1o2Q2JnNGV3MnNTamwvalR0KzNOWUE1clgrcG0xMmhQODVtSW40RzNBbHhPVE85TiBXVFE0SFI1ZDF1NlI5L1prRW1UaXJnQnNaNEZZYUphdDdLOWhrY1B3dXZOMDQ3OGFybTlxL3FlYXh6NjdId0lEIEFuUFBSNzlyN2lsUXBKYUJlUUEzVVIwY284ckJSdVUvZ21RNXhIUkViTTdMTkd4akFvSUJBUURuRGJmejgwdUwgVDJJZTJyT0NabkpKNVZ2QkhvNjRaNHQ2ZFB2U1dPZWwzNUtFVVVCZERROWMzODhRZ1Jhb0Z3NTNRc0lBVk5TUyArNUtRTEtCdjZRRFJLdFRmNEtMWXFZdWRGcmM0MVAwM3UwS3RWMWZCNklBcUFaejB5Qi9TSXRIY3VJVTMveDJlIGNjcVFGaExCZkZPb2dWWDRUd29wQkVESlBwZnJQZ2JLMzhCS2VRTVp4RkUrdnFTOFd2K0owOFNDSmVkRmxGM0UgUS83MXdKQUtXc3JrVldMN3pBOTFRZ25rOVM3Mzk5UFB1SS8wUE91cTl1bkRvV2htazQ4SUx2V0J1RDh2aHVuQyAxVmFvcHBRMjNRMkpBblBXMFdwVGg2WEpDTkFBdGRQVFVDem5pTE1QeHlwenpEREd3a2JJKy9JeDJScEZyNDI2IHJ5Tk15em1GQTlwakFvSUJBQU02WkdybkQ4cUh1SDJrSHR0eWZTRlVWTWdRclVMVkhGenRWN0lNUUZhTUx3QkUgbWk2SVhBS09yNk42VUxVRHhIam1BbjYzZzIwRmFWQlo3TGZ1ZGF3NS9ZblpxQUpIbnhPZTlSZ0RzMFY3NDdUMyBhdEhUbzA0N1VjN0NFTjJXSjlMbldBa1hqNFZqZm56ZHZDNm5NdFJ3MlpXMFNKdEp0TlArbmZyQkxjdjZUZ2hWIGgwbmt3VGNSZHI3L09aK3VuM3FPUEVFaXMyYlF4Z0M4clprcGhIV21EOFljVlpJTnp3MGh6UWZkald5L1B6d0UgK1BndU9qakhZbUVEOG0rQngrTldxOGF6YVBySENMaSsyU3NWTHVmOXRQTGJiWVlPN0JGNGJmOTZWZkZPeGd0OSBpMEpRb3RBanZsUC9tNE5aMHd0YWx4S04vaWdrTVdjRmlwU0JKSDhDZ2dFQUJqMStuRjRUeWoxb253QzFIRzU3IDQ3Y0lGVjBuNlo4U1MwcGhpcnJQOXREaytpSGZwU08zS0lENjdLMHYyWFpWODY2ZjRyWm56MWh3Q3VqSnBId2MgZzRtdW1pVk5BS0VEbmtpQXhrNHFVSmtFSWY1YjVtYkxIMWRQeitTZngyTWRXK0szNWwxRGhZWDVQSTc4RHJHMiA2TFFsaUVGS092VmNjcEw0TTJoSGNxODhXRWFRYU4rK2VmMVlJYVlyaEtOdGlUNVEwclpCR2cza0V1c1NlTlVlIDZhL01ycFJDVHA1citmME5PYkU5elR4azF1bldTNVhEbG44RGZORzdhVE1yZWtkcG5YVDlWeisveVdwR1VuMEIgNHBOb1lZTGlaa01oblI1Wno4c1pYM21vM00vNlZoREErc09uQlpjMXBqUDN4SlRpZXNOVkJwZTRVbGlpd3c3cCBsUUtDQVFFQXB3aWpkK3FQRGthc2F5TjEyV2dGWnJzOFpQOUd2b0pkMWtZdjJROGtTRmY0SFBvQmdMY1dmME5EIDk5dzVKTDh0MDlxaG1lNWp1bFVjemNId1Vmb2JIeTJPcFJEUjJvTWlhT1YzdXNTOWNEQWhiN1N3REwvajFiaDggM2x6bmVFS1kwZkY3SW1xeEJTQ3k5d0wyUVVWdVo0c0xkeXVQeHozZjdnZEZQNldkL0t2ME9NRlVxTzVWMGdWbCAxcmEzaHYwNDZEdWhJbzBucG13d3VnSkpwOHczSXdQeVMzM3QrS2Q4bXhyaHdCeEx1Z0kzZmlMdnB4ejVxb2xXIEd1dFdRbEkydDZwRHVFOUdwTmsvYXlCbkozcDNhZjFETkpTU3Y1N1dGWHZjK25hZHZhdlJ3MEhRcmdia3ZZekcgT1N0NWtLVHRySWdoUi9yb2k2RlJ0clJRSEJibXJRPT0gLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
        packmlsimulator:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZGVENDQXYyZ0F3SUJBZ0lVSE5IK2QzOFlMQXc0UmIrRkQzeWNGdXYzRHVZd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxeGMybHRkV3hoZEc5eU1CNFhEVEl5TVRFeU9EQTVORFl6TWxvWCBEVE15TVRBd05qQTVORFl6TWxvd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxeGMybHRkV3hoZEc5eU1JSUNJakFOIEJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQTJscTRMWllyS2ZaYlo0aUlMVEJpaFp1clkyM2EgRVRVUk92SkRtSVlsMjZpc1Jpdkh1dTBib0lSRDNIOUJORC9mSlhKVmZsS2F1bCtqR0xhNmt0d0lxaHkwWVIwTCBOWVY5WTY0bmhLeGl3SlN1MWZoemxYRUI0Q3U5SkRDVUt0aDlpdnNudm80ZHV2aFFlMTBGUkt6YlVCY3Vra0d3IHcxY1N6M2V5aktHS2t3NGNzUnI3UDF1Z09oUDh4NU5la096alNnMmltQWY5MGlyeVlScE52M05KbzMyQzU5Y3EgMmFhaWZWaXI4aGxHWGIva0RaMnhKS203KzE3VHZsaFlIcnN2b3RNd0JuREI4c0ZMQ2VUZ25sU3FKY2phZjdzUCAxbFRnTHhMWU1RdHpHbm1IQmlmNzFscTR6OEJHK0E5TTZIRFhaZkd0VmdhTVFORXRFMkxhMCtFMmFONjV3S1FSIDlVVEpsWEw4SFVBMlZZVG5XRThEY29CSnpWaEh1dzFsblpjcXltdjNaMHliZG1raHAvQ1dvTnJRN3dnMGxrUUsgYUZOTkpkQ2tqZGlBKzFMQ2taVmUvVHR3UzZOMzVzenZXeTZ6U2RBWmlLK2dBWnR1dTJXcnJBd09hQWFMdGljNCBhc1k3SjlwL09TWnNwMjh1TVBXMzlsakhYbG1vR1phTlRGQnVIbm9LOXFaRmFlajQ0eWhKQnBQTVdHd1k3MXNLIHpuem1lNDlJb3BXOVR3K0NvRzFFbEJ1VS9GTjdaNUpuWXc1alRoTktZSElwckZPd1NaVEtSZUd1OGZCQnJJVFIgTmxKS0hPU2Jwams1YzNFS09hODZUcWlvazJsUkRwSXBLTHNuYjFJblhrOVduVVhIenhyNytzdHBYMityZWtjcSBweUdjMkIrcFVOZE5EQ01DQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRkdNdCtWNjdjRFhJUVlVR1RUMWYwMUZRIC9OektNQjhHQTFVZEl3UVlNQmFBRkdNdCtWNjdjRFhJUVlVR1RUMWYwMUZRL056S01BOEdBMVVkRXdFQi93UUYgTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBTmpJdEowVFJpaEpNNUo5OGNXWjZpMTVPUEpJL25hWCB6RWNRZ3Fyc0kzVjB1YmNpcHE2citNTEhER2FBVElYR2dVaWQrNGJhSDVsNG95Q3hJR1BXL3VrcjFTSGNNVXhnIHpaMnAzbmdLTVpzeHhjcDFYWnoxUVRZeENmblcvMFJ5QTRiRmF6NEZwSm1rbmEwVzY1aVpvSllzU24wd2FRMSsgTENVN05aZkhOU2dyUFNsL0pkMDhzN2swOW51V2xEdDJhVlo3ZERpaXBvQkk4dTdicHBtK2dvWVNUZ0VUd3RneCBpZlIzNldHVXk2TWVJSzBGbktGOHM4eGxUTXJDaHdjOUM0bzdCNmRRbTRRTktVK3U1THBzTkZSWlI4RnQ0Tkx4IFFjQXhScnIzdVVDUmpLK0FVc1M3TkhTRjhOdVZUTzF3RU5yMStvbkh4ekIzWHFZT1RSNWMvN3ovQlQrQXdvcEggdTc0UFF3ejRWajNzd09SV0lNRVAwUTFhY1JuZTI2cHVISFF4dFpKWG52ZlhuSXRteVZqbnV4ZHkzVEV3R3lwLyBLMERNL1cyQlpJRUZpeXk5eXdaYjg1K1JUdzBqdjBrNHR2enBnNUQ0QVJ6bXRXeTRLeEZsajBoanBFMHhYSkYwIG9kUzBDUDhDR213dXlJb0tkaWd3Q0FsTEYzRnpONC96WUNsRWRLRWpHNjYvWXg2MDZvb0QxcUgzZ21kald4aFkgL3NKZmlURm43MVdzU0RQcWdzVUVZdWoydExtdVdsZE5YcUdZbncxUGJ5eXQ1WFlIMncvak52S050c2g3b2ZidSBpRkNYeVE5WHQrbkhpUTZXNXZLdk5ZcGlZeHNHWitkcnZXOHpMUERuUXRFWWNTNGN0OEhBS2I4WUhZUDlpMjJFIGZWOGdSRE9QREZPdiAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpSUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1M4d2dna3JBZ0VBQW9JQ0FRRGFXcmd0bGlzcDlsdG4gaUlndE1HS0ZtNnRqYmRvUk5SRTY4a09ZaGlYYnFLeEdLOGU2N1J1Z2hFUGNmMEUwUDk4bGNsVitVcHE2WDZNWSB0cnFTM0FpcUhMUmhIUXMxaFgxanJpZUVyR0xBbEs3VitIT1ZjUUhnSzcwa01KUXEySDJLK3llK2poMjYrRkI3IFhRVkVyTnRRRnk2U1FiRERWeExQZDdLTW9ZcVREaHl4R3ZzL1c2QTZFL3pIazE2UTdPTktEYUtZQi8zU0t2SmggR2syL2MwbWpmWUxuMXlyWnBxSjlXS3Z5R1VaZHYrUU5uYkVrcWJ2N1h0TytXRmdldXkraTB6QUdjTUh5d1VzSiA1T0NlVktvbHlOcC91dy9XVk9BdkV0Z3hDM01hZVljR0ovdldXcmpQd0ViNEQwem9jTmRsOGExV0JveEEwUzBUIFl0clQ0VFpvM3JuQXBCSDFSTW1WY3Z3ZFFEWlZoT2RZVHdOeWdFbk5XRWU3RFdXZGx5ckthL2RuVEp0MmFTR24gOEphZzJ0RHZDRFNXUkFwb1UwMGwwS1NOMklEN1VzS1JsVjc5TzNCTG8zZm16TzliTHJOSjBCbUlyNkFCbTI2NyBaYXVzREE1b0JvdTJKemhxeGpzbjJuODVKbXluYnk0dzliZjJXTWRlV2FnWmxvMU1VRzRlZWdyMnBrVnA2UGpqIEtFa0drOHhZYkJqdld3ck9mT1o3ajBpaWxiMVBENEtnYlVTVUc1VDhVM3Rua21kakRtTk9FMHBnY2ltc1U3QkogbE1wRjRhN3g4RUdzaE5FMlVrb2M1SnVtT1RsemNRbzVyenBPcUtpVGFWRU9raWtvdXlkdlVpZGVUMWFkUmNmUCBHdnY2eTJsZmI2dDZSeXFuSVp6WUg2bFExMDBNSXdJREFRQUJBb0lDQVFEVjhKVU1kVm9OWDBmbmhTcUh2Q1NMIDdCNWM2VUVFSXc2aXhzUGNLWFBtYUxtQ2QxcldsNEsrSDFtdUxURGgxTUw2bWErU2ViVUliclFLZnQ4SERYZWYgMVVnVzdySVEycDRra0hvL3ovZGg0VXY4Y2RZdDBlK1lpTUpsTndPMWh6QmFnQUpNL2ttNjY1bFBoYkNudlFXVSB6MkhlQTJjQnZjcThZL2NaT3gzZlA3QjFCbzZ0WVVUNElxVkZsZXJON0l3MS9tNFVyNS9OMEM1elhhWlhzc212IDJrWHNpakY5MTNyVmZZL2JRVkJrZ3FNYmhDb1FWZzNOR1BnMlE3RHpTMHc5S05haE9OR08zRHg5a1RkVGFuamIgVkpSaEdoTkdXUnJlaElRMmFaVjVseURvc3p4WXBjTDJLdHBlS2YrY3J4TWMyMUtPT3hRb1hjcmdkN2NZYWswMyBXN1oxL2xITFBRQUtnTm42cUJad2FWeWJhR0czcVBRaVFRMTlKOXRIU3ZPNXhUTXViTytaSUJncFNSZWR0YXhTIHZPNXhubTFHR0RFb2JSd2FGRFJXNFM3TmR3NHJFNWVhR2JWNjBjWHZ5b1pPdTZ2alc4ODh2Rjd6S0pUZjN5bUYgVlo2TjhvNmd1Z2VkZmNZdUU0RmhPLyttbTl1ZjB0UDdVTmlaak1tREJiWHp5VmszWGlhQUE3U3FhWGJaWDliOCBUTmM3REE3MFhDN1RLK0ZwZU03TUVtNWIyN1UzTEhzaXBrcUdpNEIweEJkTG9HbjNGemxKWVN6ekNjb2IzK1drIHliVnJhNU9GVkZnTXRHR25NTWVNeGVRTU1PRHA3Y0VEZklLck15UitmZTAyQWFlL1ZmM1dvMkY5OUszQUI0VUkgcm9NaHJBUWZMdXNBbDIwU05KbEtnUUtDQVFFQThjdjhXenlGTDFsRDU0T29YOEk4R2I5RlYwSm5taDFwQ094WSB4bUdpSnZMN0dRamNmaDZEYXliTkhmNzN2RnR3T1JMQmVUV1YrTmhKakZMbkVFS2cxTVRIK3RYcnQ2YVFQcFF2IEtkTHBJVWkzVXRVQ0VVbjRMRlRYakMzQWpGQ0lxTU9xSFlTWjd0WlUzclF3dndsZXkrWkRTclcrQy84RzkzTXAgKzVuQjJYa1BiQ0x4Ykg0b2s4S3RQcWhRWmYvRnZsUWZTcWVZSEt1MTBzdkhjV3dCMnhrc1grd25GUFRwM1JscyA2QmpFMFhycU5lTEozY1lrcWtJOU94aFpUejFhNE10UXJxQzk5b2tqSTRNUFVYRXQ3b21ScGRiME5yNXdMcjZSIFl3c0tQL0NvZE9selVDK3pYY3hlWWN4a3Iyckp1WXV2aDdoK3YrbGdsNzlKT3RzUmN3S0NBUUVBNXk0MzZoT1QgNSttVk5JSTMyc216cFA0dGhCR2JoNE1GSWV5cmVEWDYzdzRHZjF0WjdaTzJxa2kwRU9UNk1IU0pjTjBhekFRTyBIaFZkdzh4dW1WMThhL0xLRXgwTXVUK0xBVkVwSXR4bE9xSlZvSVEwOERMU3hNVkd0VDVxblNCMHV5TDZ3ejdZIG11T082bDA0bnhQWkVOM09OTWlLVG5VelBuZ3hEQVZDU25YMEw2V0VrUUIvTncyTmhKVGFBR0ZQekFuVkkxYzggQWpsblRXR2xEbCtKOVdVYlNDdVdQaGltOVBObDZ2b1V3VkVoM0ZSd0I5UXh2cDFJYmF3WXhRV29LSW5YZUoyVCB2WUVtbktuT1lEeUJHVDk0MUUrK056L0k4aDJZN01kVCtYUDNaV0E3ZWFNNEs0aXQyeSs2SVFONjA0Z1I0Q21SIHc3QU9ZYXFOc0RTdWtRS0NBUUVBZ0hwNktlUjdoRkF6TTZZU1ptZG4xZXA3SnNXREZUSEJhTnRreEd5R1k1bkMgY0dmeitST3ZrdFQ0TXBNVEFjTzRXcXNyb0lNbm9DVVUxM29KaXV0TVdDSURmTFlFWFA0bE1RcytFRVFnV2U0dyBjdFA2R0VPc21hbXZLcTM0M05YQjk2S1lGcjBwcWUyN0JPYkw3QVpIbDZKUGFUZ3V0bU1aU1l5bzV5YXBDU3c1IFZLVXdrUXhyOVMrQkxJVDB5MjNmbmFWSFJ6ek1KNWZac2h0VGEySVBqbUxPNEYwejJ2L1Q4QWFkaHFuNmtyQjAgR0pQYjNYcDJhdjF0V2FRemVGWktucDJKem5CYzM4MjRuUnI3bmJPOHl6M1A1VVhWVisxUzRKT2ozdk96eTR2TiBodW13dXcvTmgrNmF5KzUySlh0aG1yU3RYVGxjS0E4U295OGg4eU1LSHdLQ0FRRUEzdmZ6MDk4SUUzQjFpTXhqIFpMQ1BoSDNtbG0rSkN6MHg4Uk5jR2pndCszNkNnOGt1eGZabkFudld1RWl3aVpXTWpmK2kvY3lYZFNwMFlnbEYgVHNRYzRkeXNTNTBFRFpPYzFTdGJPcFZKU1RFUzF4dE1GN05kRjQyUjhmTCtUd2Zqcmk1Qm41aDR2NExrNzJQeiAzWEgrTk1kSlFCMS9UOGE0SXZNM2t2bHJnM2VhaVczaG14ellsZGVMZTZrNVRZNk5zU1Iybm54ZmsyR2NJY1VnIHRla3RuVEhrQzBxR3dPTnorK0xabExXWTJROFFVbnBhQnlNQXkzRFZUM25oOWZ6THdEV2FUV25sK2F1Yit4UEggeVlmeGw5RmhENXpOd0duVHZMa1JLcVhoZDBJREJaSzRLa3hqTzVHNjVTRjJLcXM1aHRYQkwrdkgrKzVOSUtPbiB2cUJCRVFLQ0FRRUE1LzJLYVJ5d2FmZlFKSmpnL01PcVJaQ2ZXdUY2SGJhWFFZeGl2ZE1wRi9pS1hCakZDdHpLIFNXWlkxOGtLbTB5ckJzRjRGOUw2RHlDRmFQeDVmWGRBRUc0ZnAyY3VrZXRLSWVZaTJhN285enVJazduaW52akcgcFBJMlJQakxILzFhV3dUTkh2dm1QalVFSENLV056T01Zb3N4bmdMaStlS3p4UjNqdHhySjdPc2xmUjN5RDUzVyBFVjdoWUhsU3orY1lqdnJVN01hRmI4endkYjVBNFlXL3BCRU84N2VSOXNmL2xZb3NaSTRkYmlYQnd2aUs1R1VMIGZaNEROaVRmV25acGpCb1dwTDlXeEg1RXZlRXNLVWk4Wm4zRDFvcjRWSVphUTZXbE1tcVZKRERzT3h5OXNCU3cgcFhoUlhIOTRaQ3BGaDFyZFo2ejJUUVpNcTlHalRlM0RDQT09IC0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=
        node_red:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tIE1JSUZCekNDQXUrZ0F3SUJBZ0lVRlpMQ05iMXJHNkwrWFhWSmhUYUVkV0hWdG1Fd0RRWUpLb1pJaHZjTkFRRUwgQlFBd0V6RVJNQThHQTFVRUF3d0libTlrWlY5eVpXUXdIaGNOTWpJeE1USTRNRGswTmpReldoY05Nekl4TURBMiBNRGswTmpReldqQVRNUkV3RHdZRFZRUUREQWh1YjJSbFgzSmxaRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEIGdnSVBBRENDQWdvQ2dnSUJBTGVZU0xHSTVRcGVYL1crcmkwdmp3cW9rYnBORzJ3am1xTXU3SFJhblNoTWhCNDYgWVhGYzhHVVd6dlE3a1pBQWRETkxJb0xhU3MyWTBaT1RvSjlKVW1GMXlFQlM3L0ZydDZrMkxiS2Z3UlY4R1dBciBDZjg5SURJT1RGSmJmTW1Bakg5YmRPaGN5RjhIeS9nUWZzU3JKYUFVS2xFOWw2WFdNdTNoVU9PSXp2eTJBR0UrIGVvYVJsNWNydWJWaGNhalJ5OUlaMzEyQkNrbVVoUEdiek5GUnM5dWhValZDSk5xZ3QwMlZBbitvU05rQUVIOHQgVWdEN0xtVXZHMFRvdGtjWlJ6VXpKaW01cmJWa3Brb2tweW42TGY2ZFNvNWpmLzBQWGUyYS91Z3NIT2g3aWs3USBhTk9hZ1c4OGhBeFZIM3lPMEZkMmVncHUwcmg2MjdUTXBhUVBiZkQxTlJXOFN3R3pzeFQ1RlZwOHJZcldUVGx0IGc5TXB1MFBXS25zU2JGK2RYR2N3QlVhNzJUUzdlUkNxMUQybVYwdjcyOUxDUG45N0FiMjNzem9KZElmYTZEUjcgK3huZzZHcEVmVDZoQkpacGdCVTloS1NaM1VEQW81eTdYU2V3Q2dHcy9IblpIVCs1OTJBMG4xRFRjVkNPSUUzbCBGc0xncVR0OFpnU2daUGpVWFd0WnBDVEluOElOY2czd0xoNVhOVERSdGJkd29XeDMzVkt4WFFPNlc5KzFqU1NrIElHQVJpQkJjN0FFRWdTN1N4Q0xsSEplck80N0V6ZmtrQlFTRnRIRVRxNmliRExWdkI0N2luN0lvL0hZMXNrSDggYk1uNVByM1pkRW9tRW5odlR5R2xMMTg2R1R4M2kvQ3J3K1o5aUF3UGVvVUNQS0VCK2ZHS1BoN2tSQnhYQWdNQiBBQUdqVXpCUk1CMEdBMVVkRGdRV0JCUWo2L202VENOQkZzZ1dGWHAzMTI4dXZRRTNJREFmQmdOVkhTTUVHREFXIGdCUWo2L202VENOQkZzZ1dGWHAzMTI4dXZRRTNJREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMgRFFFQkN3VUFBNElDQVFCaWNtUHJqTG9kcE5qUDB4YjFhNStjTmIzV21GSVlxVUpBNlJpMnBzQTcwaTZqNEtHRyBxRDY2d3IyWVdsOE4vVFJXL2pLYVJtREtHalhZWElFSTNMZXZyaE1aaytMMnBoTDloWnVlK3A0R2NsOGhpLzVsIFlxYUZZQ3U3cHBSbW1NMWVwUlZqdjNGbC9NelE1WW1ZZFRyWnA3dXc2Z244d2pHajlybVBMV0dWMUIxOHZVc3ogYmxkQUVSUk5BeGNxRGVYaTJ0RXM0YUR3UDRlTVo2djFzaDJiMGlVZkwrS1kzNDBMbzhzcGtwVkdMQ3lYMElZTiByK1FmdzVCRVVOV2htTUpnMUFTZUQ0eUlyWFdoQWJacktXaGIxbHIvdUV2dXJsSGEybTMrK0pNODNtUWkzL1EyIFovTkZpSkI4YVVtcDdPdlNUTU5MeTlhdGNYMjU4Sk45amJJTE9SMU1ZUjEyNi9MRjFweHd6Qjc0SGNLUWFQK2ogelZaV1dQZm1Obm5laDlWSlY2ZFQ2T3g1bjJQbzkyVE1jeWdoUGVoTG05V2h5L2M3ZFJ2MFhFcm9IdFFMZUZ5eiA4TzBWMW9TUFJiZzUyV2E0cFFXczRubUFYRmhCOEt4bTFVNitMR1c3ZnUyNmdDeXhUUXJBYlFlRXEwL2xvZXlZIHlkRE1mcWZsNnliL0ZzS3k2VThic3dQODZ2OGVQYStzZm1nWitPQ2pVOWUra2d0aWZOQVlEek8wcnVDa3dUMG4gSVByU21uYUFFUEtGcVZTaVU1QUJEV0ZaaE5KbW1oakhYS0kxdDRtaXBLeEo0ZDJHNmZkRDFTNVBRQXNIOTUyMiBGWmlXa3QrQVh2RCtoWFVFS3lLVHZUdnBNVkFWaTc5eTRrUm0wSFBuaHUyOWxlS1J5WFprUHhSYjRBPT0gLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tIE1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQzNtRWl4aU9VS1hsLzEgdnE0dEw0OEtxSkc2VFJ0c0k1cWpMdXgwV3Awb1RJUWVPbUZ4WFBCbEZzNzBPNUdRQUhRelN5S0Mya3JObU5HVCBrNkNmU1ZKaGRjaEFVdS94YTdlcE5pMnluOEVWZkJsZ0t3bi9QU0F5RGt4U1czekpnSXgvVzNUb1hNaGZCOHY0IEVIN0VxeVdnRkNwUlBaZWwxakx0NFZEamlNNzh0Z0JoUG5xR2taZVhLN20xWVhHbzBjdlNHZDlkZ1FwSmxJVHggbTh6UlViUGJvVkkxUWlUYW9MZE5sUUovcUVqWkFCQi9MVklBK3k1bEx4dEU2TFpIR1VjMU15WXB1YTIxWktaSyBKS2NwK2kzK25VcU9ZMy85RDEzdG12N29MQnpvZTRwTzBHalRtb0Z2UElRTVZSOThqdEJYZG5vS2J0SzRldHUwIHpLV2tEMjN3OVRVVnZFc0JzN01VK1JWYWZLMksxazA1YllQVEtidEQxaXA3RW14Zm5WeG5NQVZHdTlrMHUza1EgcXRROXBsZEwrOXZTd2o1L2V3Rzl0N002Q1hTSDJ1ZzBlL3NaNE9ocVJIMCtvUVNXYVlBVlBZU2ttZDFBd0tPYyB1MTBuc0FvQnJQeDUyUjAvdWZkZ05KOVEwM0ZRamlCTjVSYkM0S2s3ZkdZRW9HVDQxRjFyV2FRa3lKL0NEWElOIDhDNGVWelV3MGJXM2NLRnNkOTFTc1YwRHVsdmZ0WTBrcENCZ0VZZ1FYT3dCQklFdTBzUWk1UnlYcXp1T3hNMzUgSkFVRWhiUnhFNnVvbXd5MWJ3ZU80cCt5S1B4Mk5iSkIvR3pKK1Q2OTJYUktKaEo0YjA4aHBTOWZPaGs4ZDR2dyBxOFBtZllnTUQzcUZBanloQWZueGlqNGU1RVFjVndJREFRQUJBb0lDQUJJR0wwek9wYjNJMmg3a0kzRm9NK0RWIC84aU1mVjYyZUI0QkkxR2crOERURWoxdGVkZUpTa2lDWHJyM2hpamZBb2x1bk9xL3g0dzdyb2VRZkxwbWxtSGYgRUZQUVVLSWc4eHozcHJEY29qWWJ3dG9BSDdFaExTSDg2VjFFZ2hHK1B3elp5N1pzTlhldTZrVm1TU3ZCcWFYMyBsTmY0OWdSZjdRd1JqTUZwMHZoWVhkMHVKeFZEQWVEamVBM29qU0lIeHJ6UHNYQWFsUW40UEwwRGtLNFVHVlk4IGxqZUlVTm50NFZFS2lmNUNaVFI0bnlYOUt3blJueEpyOTM5aVlWTEZsb29RaFhTZk9BQ1E2d3BvWXNqcU9NM0EgWDJ0dk5VZUExTFhZKzZHTGd5TUh6ZUpDNzZlbWlZS0VMR3FSaU0vUHJZQ0lyeDZMRnNEcHZ0d1hJMFBpQitidiBlUUdpcEpxb3IyeTJ3b1pGbDRsL0lzaml3V1lyRlNQbjMxWUlIbFFkM2hYMlpVWmRjSWFmNGlyalhkZGduelZJIDVRQVJzU3c5Y0pxRWVSRmF0RFpCNFpWbjFXa2l0eWJzVUllOE1zeUVZaFJROUx2T3FWL1B4elVSMXRURTdHNm8gVTBmL3N5ODJXVlJaVk9xYld5K29SMkFpTVV2Vm44eGcvU1dvWVZHZCt2Y2dJL2pwdk9PNWZPQ0FKdS82OGVRNCByM0hxSU5ocVlBR09Ja1EybVNRLzVGUC9qR3pFSkhmYm4yY3BVK3hHblB5YjhudHRDRStvZGZ0MUErdG9QWmZOIDBvb0JPUUdNZDk0b05Oc1ZYWGtHVjJ1aytQdEhjT0V6UGVHNW9qSXNsR3RVMjZ4d2xkWW9UM085NmVJdmRGcnogOHlJU2Jqblc3YzdKeWhwVlFXekJBb0lCQVFEY1c5V0JENUhibWNyRExJV3ZQeTZEdzdPY1l4NlNETE0wU21CMyBjR0RPUU1pdTRvSSs1cW1LSXNPTktXUi9tQ0hKZUFrbDIxT0ViR2lFbHgvUHdicEZNaFk0aVgrdGFJd1NaN1N0IGo4S25oano0MTkzU0tWN0dhWjlNNExJZUllS2ZFSHhrZEc0NUgxNEFyRUVQSHViMTVIWG91SHFzWDRvSDVUSjYgQUd5bUNBR043SUhaQm5WZFVpaFNSN29tYWV6V2x1eVhNK0FQWTlDOGh1bTZQRERRNE9xSVBqZFpmN282Snd5MyBTTnBoWHp6ZERyZDB2YXRidnlEdWI2Nkxja3hGSGJuRFQ1TisxRjJjdGJLVmh3K25TaUNaNEIzLzJ2VHJwTFcyIG9uZDFpK1IxbzZqSGdOdng4dEVialQ1aGFzMTJnaTZjQVArMUo4ZWg2TEtNanpqbkFvSUJBUURWU2pUZG84cGEgQzR3RGZPSXF0QWJveEpGMEZ6THhKM3VweUtIb2pzNVdzdys1UktNZDVaSHd4TGxIcDdjUzZLRFhxUStjZjBQayBQenRmc0lWWWJybnM3elFYUHZQaE5JWE9lYVVqTG5QUjhuN3cvMWpvY1FUZHNvUUkzcmFEeGhRenBOWEpoWE1rIHEvbUFzTzl5bXJVMjNxUnYyNGthUjl6ZmVWQ2Q5V0RXMnVaZXB4OC9RM1VFeFZhbnRkZ1BUQTRCTG5INmdIZFogNVMydHM0MGRSbEx3dnRvNUpxbWNoNEE2ZzBXWnV1NlFENHNKbWpJSm51S3AyU0lZelJwSnk3c215cnlqazFMbSBNa3JRZjFCQ01DY2ovb2d1NFFOK0NlcXFOT3c2Y1RTQ3hXUWd0Rk0wV3RXUys0N3F5WTFsOEw2Z0RJeWIyeXYxIEQ3QXJudDQrUUdNUkFvSUJBSHJYSHVCQmc3Zjl0ZEN6b3hxY2lCdWdIeUpSQnh1M3hMYWp0NzhkZ0htNkY2V1cgVTdFbytONHVud0MwVUhmb29QMGswMFN0VFpPR3M0VW1rZTlKT2NPVk5sbnlIS0RZcFMwbGJzMUtWT0w2ckVhMCBYODNtamhUaGtKSlV1RGFnQVN0WEQyRVludEZ0TVFRREFvbWhXbk05RnBYVE1WK2lLdHBYNUptcVh1YjNrNVpBIGYrb3g5WDgrYTRmaXdGemxzOGUwZnRPVGNaWml1RnhBZ1U3MmV1Z1dXZWYxZHZtSGdKTW1iYXBIREtZM1owQjggRWIwY2RzaEFkZVUxa1FIZmg3RUg3eVIzMmV0Y0M0dHVwczFBYTNPQW1VZnViZ3JSVHJPR01GNU5sM2FKczZQNCB4Zi9oVDd0QzkxcjZsQW5PZGhkWVh3OU1aei9mbXlRaENsZmRCNFVDZ2dFQVZtZFNWVHRGL1FaU2VSTTlOOWxvIE55RnlYeG9LekFDWHF5Y1kxL0lLQ3J0Tk1sdG96UEswRlZwTVNJZmJ0VEJDQUR0L2xJRkZ5cEFIQ0hPbEFUY1IgNExiaVhreGxWYVVHVTZlWnkwL0ZJWmJmNzljeGVEQllyVXJsREFiVTN6cjk4aEhqZlZpdlZYckpmMld1Q3JvNyBrUGZPbTNYTzY3T1MrWURXdExhenZUWStQcmZyQTZEYkpjeWZseDhtWU1RSnBGYmhXMzV4V3h4cFRjVy84ODBLIFNuYTJScEt3QVRZdkx3VUF6QThiRjRjRVp5WnRBTks1dGQ2OVhsaXdQcGJtd1FjK05mRzNrb05ySlYxOThPSTYgNk96eTFETFpURlRPR0plSjN2Ny9LNzYxR2o2U3VsSFYxVTVORGpZS0x2TEE5bXMvQnVCWnhWUE9wVTBkY1JCNiBVUUtDQVFCU0hFRGQzd1pGR0tEMEl3UlNHS2R5bVJUeDMwRWdwandjYU45eGZ6Z0xsbFR0MGdLTWpJVFpYVFFXIEFGS2x5L2d0T3VRQjJ4aXR6MWwvc0xveko2bHIydm51Z2hNeGQ3KzJPN0tMSnVEdHZrVXg0dG1abzdzRm1EbWEgOEFJNXBNbExWVUFoelJYY1NNbWp5ZWRNS0x4RGl0R0VQRVJjcC9LaHp2STIrTzNXaHRxOTFyOVZOTlpqT1ZnVyBDTnIwZWQzR2hBbmwrbktTWXd3bXBhNHdGWG9qM3VlV0VVaW43R04zbUpVb3hKWWhvZDdCL1lyQWE4dEdURUpzIFE2eDBlQWNhK08yOFI1cXFoaUZvWjdEVytzR014MGZWWi83MXNZMFhwRkt4T3NQM2tEZkZsV2xaVXY1dGlhdVYgeXdhV2VPZ3lVZC9USlNzSzFBTk9VMVJDRFdHcCAtLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t    
    

    # apache kafka, mqttkafkabridge, kowl, kafkatopostgresql
    kafka:
      enabled: true
      useSSL: false
      defaultTopics: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic
      tls:
        CACert: |-
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        kafka:
          cert: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          privkey: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
        barcodereader:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkabridge:
          sslKeyPasswordLocal: ""
          sslKeyPemLocal: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePemLocal: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          sslCACertRemote: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          sslCertificatePemRemote: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslKeyPasswordRemote: ""
          sslKeyPemRemote: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkadebug:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkainit:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkastatedetector:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkatoblob:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kafkatopostgresql:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        kowl:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        mqttkafkabridge:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        nodered:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
        sensorconnect:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
  kafka_certificates:



  # timescaledb, factoryinsight, grafana, redis
  # datastorage is the basic infrastructure to get messages from MQTT, storing them in a database and exposing a REST API with KPIs that can be used in Grafana (contains timescaledb, factoryinsight, mqtt-to-postgresql, grafana, vernemq, )
  # If you want to enable only some of these components, set enabled to false and enable them in the detailed configuration below 000_commonConfig
  datastorage:
    enabled: true
    db_password: "changeme"

# factoryinput, grafanaproxy
  datainput:
    enabled: false

  # mqtt-to-blob, minio, kafka-to-blob
  # blobstorage is the infrastructure to get image messages from MQTT and store them in a min.io blob storage (contains mqtt-to-blob, minio)
  blobstorage:
    enabled: false

  # mqttBridge allows connecting multiple United Manufacturing Hub clusters, e.g., the installations on the edge with the central cloud
  mqttBridge:
    enabled: false
    remoteBrokerURL: "ssl://united-manufacturing-hub-vernemq-local-service.united-manufacturing-hub:8883"
    localSubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.
    oneWay: true
    localBrokerSSLEnabled: false
    localPubTopic: "ia"
    localCertificateName: "LOCAL"
    remoteBrokerSSLEnabled: true
    remoteSubTopic: "ia"
    remotePubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.


  kafkaBridge:
    enabled: false
    remotebootstrapServer: ""
    topicCreationLocalList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic# ; seperated list of topics to create on local broker, if they do not exist
    topicCreationRemoteList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic # ; seperated list of topics to create on remote broker, if they do not exist
    topicmap:
# Example topic map
#      - bidirectional: false
#        name: HighIntegrity
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$
#      - bidirectional: false
#        name: HighThroughput
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.(process[V|v]alue).*$

  kafkaStateDetector:
    enabled: false

_001_customMicroservices:
  -
      name: example
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION

      # this will expose port 80 on the host on port 8080
      port: 80
      externalPort: 8080

      # startupProbe, livenessProbe, check whether port 9090 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      # startupProbe: 100
      # livenessProbe: 50
      # probePort: 9090

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: true
  -
      name: example1
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION

      # this will expose port 81 on the host on port 8081
      port: 81
      externalPort: 8081

      # startupProbe, livenessProbe, check whether port 9091 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      startupProbe: 200
      livenessProbe: 500
      probePort: 9091

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: false
  -
    name: cmtester
    image: unitedmanufacturinghub/custom-microservice-tester:latest
    enabled: false

    # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
    imagePullPolicy: Always

    # these will be passed as environment variables
    env:
      - name: LOGGING_LEVEL
        value: PRODUCTION

    # this will expose port 81 on the host on port 8081
    port: 81
    externalPort: 8082

    # startupProbe, livenessProbe, check whether port 9091 "/health" is accessible.
    # If not (e.g., due to container stuck), the container will be restarted
    startupProbe: 200
    livenessProbe: 500
    probePort: 9091

    # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
    # Recommendation is to turn it off
    statefulEnabled: true

##### DO NOT CHANGE ANYTHING BELOW HERE (except when you know what you are doing) #####

serviceAccount:
  create: true

### kafkastatedetector ###
kafkastatedetector:
  enabled: false
  image:
    repository: unitedmanufacturinghub/kafkastatedetector
    pullPolicy: IfNotPresent
  activityEnabled: true
  anomalyEnabled: true

### mqttbridge ###
mqttbridge:
  enabled: false
  image: unitedmanufacturinghub/mqtt-bridge
  storageRequest: 1Gi
  resources:
    requests:
      cpu: "100m"
      memory: "20Mi"
    limits:
      cpu: "200m"
      memory: "100Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: M21tR09vUkI3NTBSUlJWOHdRQUV2R3VCbUJEeGw3WDY=:100:GguBx5OY0JHD0IQhCoVgzf0/cx2dPDbHcC4NXu2fEnu0Oz2Ii2afammPZBd0y0M0Q46Gyf/z/c4lKd5qQ8Oo3Q==

### barcodereader ###
barcodereader:
  enabled: false
  image:
    repository: unitedmanufacturinghub/barcodereader
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "2m"
      memory: "30Mi"
    limits:
      cpu: "10m"
      memory: "60Mi"
  scanOnly: false # Debug mode, will not send data to kafka

### sensorconnect ###
sensorconnect:
  storageRequest: 1Gi
  image: unitedmanufacturinghub/sensorconnect
  ioddfilepath: "/ioddfiles"
  lowerPollingTime: 20 # Fastest time, sensors should be requested to serve data
  upperPollingTime: 1000 # Slowest time, sensors should be requested to serve data
  pollingSpeedStepUpMs: 20 # Time to add to actual stepping in case of failure
  pollingSpeedStepDownMs: 1 # Time to add to actual stepping in case of no-failure
  sensorInitialPollingTimeMs: 100 # Time to begin retrieving sensor data (Set higher then lowerTickSpeedMs to not kill sensors instantly, after they recovered from overload)
  deviceFinderTimeSec: 20 # Time in sec, before finding new devices
  deviceFinderTimeoutSec: 1 # HTTP timeout for finding new sensors. NEVER set lower then DeviceFinderFrequenceySec
  maxSensorErrorCount: 50 # Errors before a sensor is temporarily disabled
  allowSubTwentyMs: 0 # Set to 1 to allow lowerTickSpeedMs of under 20ms. THIS IS DANGEROUS !!!
  additionalSleepTimePerActivePortMs: 0.0 # Additional time to add to sleep time, based on active ports (especially helpful if you mix devices with 1-2 sensors and devices with 8 sensors)
  additionalSlowDownMap: [] # JSON map, allowing for slowing down/speeding up sensors based on serialnumber, productcode or url
                            # Example:
                            # [{"serialnumber":"000200610104","slowdown_ms":-10},{"url":"http://192.168.0.13","slowdown_ms":20},{"productcode":"AL13500","slowdown_ms":20.01}]
  resources:
    requests:
      cpu: "10m"
      memory: "75Mi"
    limits:
      cpu: "100m"
      memory: "200Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: ZVF5bDJ4TWtjVXVWZVVESlRXZU1DSHA4cDdHbUhKSEc=:100:B42+ySldBE+uilWricvIif+UJ0oW5iXafloUyiZclbYoQOOthOet5NQAKCTHITDSHadxvjbgfiF/908QmwqZOw==

### cameraconnect ###
cameraconnect:
  image: unitedmanufacturinghub/cameraconnect
  # tag: development
  loggingLevel: "INFO"
  resources:
    requests:
      cpu: "10m"
      memory: "25Mi"
    limits:
      cpu: "100m"
      memory: "100Mi"

### iotsensorsmqtt ###
iotsensorsmqtt:
  image: amineamaach/sensors-mqtt
  tag: v1.0.0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "100m"
      memory: "100Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: T3VSY2szQ0diWDkyOGpoSGpDQzVqc29VZlJ2UkxiOTI=:100:6qxZS+Bhn8QXrF1dUo6fU9Eg/esjw6zipq6xv9uct84Jyhv0mJTUi5SHSBW4TbF66vBOrE3JnZ//rUutEl8/Bw==


### kafkabridge ###
kafkabridge:
  image:
    repository: unitedmanufacturinghub/kafka-bridge
    pullPolicy: IfNotPresent
  # tag: development
  initContainer:
    repository: unitedmanufacturinghub/kafka-init
    pullPolicy: IfNotPresent


### nodered ###
nodered:
  mqtt:
    encryptedPassword: aVptalRWUk5Dd0QxQmtlekRYcnlZemJ3VTJKMTlDZWE=:100:PrJcg4O5Y371AnbS+Qt//rdNhjeBfkpWm24B0TBQPmNC+3ANbjIpFoJUh/gfBZHdE8fI6DwU8/u7RSjBuSTRkA==
  tag: 2.0.6
  port: 1880
  storageRequest: 1Gi
  env:
    NODE_RED_ENABLE_SAFE_MODE: false
  timezone: Berlin/Europe
  serviceType: LoadBalancer
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  flows: |-
    [{"id":"41c9c6783cbe3070","type":"tab","label":"Example flow","disabled":false,"info":""},{"id":"45f7c4f7.dff1cc","type":"tab","label":"Machine data genenerator","disabled":false,"info":""},{"id":"587a158d.20327c","type":"subflow","name":"addShift","info":"","category":"","in":[{"x":40,"y":100,"wires":[{"id":"d4c91958.7b47b8"}]}],"out":[],"env":[],"meta":{},"color":"#D5F0FF","icon":"font-awesome/fa-calendar"},{"id":"9d0bf5c6.2530b8","type":"subflow","name":"output_to_activity","info":"","category":"ia: nodes","in":[],"out":[],"env":[{"name":"max_duration","type":"num","value":"10","ui":{"icon":"font-awesome/fa-clock-o","label":{"en-US":"max_duration"},"type":"input","opts":{"types":["num"]}}},{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/sort.svg"},{"id":"882af5a6.a58b28","type":"subflow","name":"state_logic","info":"","category":"ia: nodes","in":[],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{},"color":"#D5F0FF","icon":"node-red/status.svg"},{"id":"ae592577.420618","type":"subflow","name":"processvalue","info":"","category":"","in":[{"x":60,"y":60,"wires":[{"id":"d996e872.8c0c88"}]}],"out":[],"env":[{"name":"namePV","type":"str","value":"yourProcessValueName","ui":{"icon":"font-awesome/fa-text-width","type":"input","opts":{"types":["str"]}}},{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{},"color":"#D5F0FF","icon":"font-awesome/fa-area-chart"},{"id":"fc9d8f9c.14845","type":"subflow","name":"count","info":"","category":"","in":[{"x":140,"y":120,"wires":[{"id":"a85c6ef3.fcf27"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red-dashboard/ui_chart.png"},{"id":"b60b06bc.cdb4c8","type":"subflow","name":"detectedAnomaly","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"c9fa6d5b.84b01"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/alert.svg"},{"id":"b77cb6f5.685178","type":"subflow","name":"activity","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"6e72af6b.e6363"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/serial.svg"},{"id":"62375092.d1012","type":"group","z":"45f7c4f7.dff1cc","name":"Sample Data","style":{"stroke":"none","fill":"#DAECF0","label":true,"color":"#000000","label-position":"n"},"nodes":["6e3f046.47cecfc","f8283b61.08d9e8","5b0afc76.d39564","20f4ef35.92e22","5649a4d0.ce43ec","3b5e6754.ff4f18"],"x":34,"y":19},{"id":"7cef6b1d.d23a54","type":"group","z":"45f7c4f7.dff1cc","name":"United Manufacturing Hub Nodered-connectors","style":{"fill":"#2D393D","fill-opacity":"0.66","label":true,"color":"#ffffff","label-position":"n","stroke":"none"},"nodes":["96c50010.c50af","ae8cdaa6.a56a68","c8d8afe1.59fa","246a1685.58379a","7bb0392e.8a3bf8","b34237d9.7d2cc8","e61e8604.509d48"],"x":474,"y":19},{"id":"ba92812b.1beda","type":"group","z":"45f7c4f7.dff1cc","name":"Selection of standard interfaces","style":{"stroke":"none","fill":"#DAECF0","label":true,"label-position":"n","color":"#000000"},"nodes":["c3372d57.50822","37c52f75.d6a81","a8e1a854.89e108","cdd3a9a3.ceed18","28b0d095.a6f2e","15717681.474919","28ac3b5b.0c6e64","37c52f75.d6a81","6c82df5c.fb975","392b9fc.5171e6"],"x":54,"y":459},{"id":"5dff9791.d1b278","type":"mqtt-broker","name":"","broker":"united-manufacturing-hub-hivemqce","port":"1883","clientid":"","usetls":false,"compatmode":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"d4c91958.7b47b8","type":"function","z":"587a158d.20327c","name":"Create Shift","func":"timestamp_ms = Date.now() \ntimestamp_ms_end = timestamp_ms + (msg.duration_in_minutes * 60*1000)\n\nmsg.payload = {\n \"timestamp_ms\": timestamp_ms, \n \"timestamp_ms_end\": timestamp_ms_end,\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/addShift\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":100,"wires":[["38e4349e.30f73c"]]},{"id":"38e4349e.30f73c","type":"mqtt out","z":"587a158d.20327c","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"1","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":450,"y":100,"wires":[]},{"id":"1a01904d.a305b","type":"json","z":"9d0bf5c6.2530b8","name":"","property":"payload","action":"","pretty":false,"x":250,"y":100,"wires":[["d5821e95.eb077"]]},{"id":"85638585.b5dfb8","type":"mqtt in","z":"9d0bf5c6.2530b8","name":"MQTT-IN: output","topic":"ia/+/+/+/count","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":100,"y":100,"wires":[["1a01904d.a305b"]]},{"id":"d5821e95.eb077","type":"function","z":"9d0bf5c6.2530b8","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/count\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":100,"wires":[["dc440bb.3e238f8"]]},{"id":"dc440bb.3e238f8","type":"switch","z":"9d0bf5c6.2530b8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":100,"wires":[["c52cba61.6b62d8"]]},{"id":"b9e10ec3.94988","type":"function","z":"9d0bf5c6.2530b8","name":"Format: activity ","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"activity\": msg.payload\n}\n\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1400,"y":100,"wires":[["55c7ebc4.703714"]]},{"id":"55c7ebc4.703714","type":"mqtt out","z":"9d0bf5c6.2530b8","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":1670,"y":100,"wires":[]},{"id":"a0736c99.0b8bc","type":"rbe","z":"9d0bf5c6.2530b8","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":1250,"y":100,"wires":[["b9e10ec3.94988"]]},{"id":"c52cba61.6b62d8","type":"function","z":"9d0bf5c6.2530b8","name":"","func":"flow.set(\"ts_last_output\", Date.now())\nreturn null;","outputs":1,"noerr":0,"x":720,"y":100,"wires":[[]]},{"id":"3f8212b6.7c6b8e","type":"function","z":"9d0bf5c6.2530b8","name":"","func":"if (flow.get(\"ts_last_output\")==undefined) {\n flow.set(\"ts_last_output\", Date.now())\n return null;\n} else if ((Date.now()-flow.get(\"ts_last_output\"))<env.get(\"max_duration\")*1000) {\n msg.payload = true;\n} else {\n msg.payload = false;\n}\nreturn msg;","outputs":1,"noerr":0,"x":1100,"y":100,"wires":[["a0736c99.0b8bc"]]},{"id":"1a8345c1.409d4a","type":"inject","z":"9d0bf5c6.2530b8","name":"","repeat":"0.25","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":930,"y":100,"wires":[["3f8212b6.7c6b8e"]]},{"id":"b3c8f72d.df9cb8","type":"function","z":"882af5a6.a58b28","name":"State logic","func":"msg.payload = msg.payload.detectedAnomaly\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1310,"y":120,"wires":[["8515bd04.5e05b"]]},{"id":"39cac321.c87fbc","type":"function","z":"882af5a6.a58b28","name":"get currentactivity","func":"msg.payload.currentActivity = flow.get(\"currentActivity\")\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":120,"wires":[["8f417e0a.f6dc9"]]},{"id":"8f417e0a.f6dc9","type":"switch","z":"882af5a6.a58b28","name":"Only when machine is not running","property":"payload.currentActivity","propertyType":"msg","rules":[{"t":"false"}],"checkall":"true","repair":false,"outputs":1,"x":1080,"y":120,"wires":[["b3c8f72d.df9cb8"]]},{"id":"e25eb0a9.c84f1","type":"function","z":"882af5a6.a58b28","name":"set currentactivity","func":"flow.set(\"currentActivity\",msg.payload.activity)\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":40,"wires":[["a53182a9.61bec"]]},{"id":"13ec32fe.d3a99d","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine Not Running with reason)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": parseInt(msg.payload)\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1710,"y":120,"wires":[["dae1723d.6a99f"]]},{"id":"a53182a9.61bec","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload.activity","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":910,"y":40,"wires":[["1a46ed5a.1bc5a3"],["947fea87.7b4ba8","4b651e29.d8987"]]},{"id":"1a46ed5a.1bc5a3","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine running)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": 0\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":40,"wires":[["dae1723d.6a99f"]]},{"id":"de0540c3.06dbd","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine not running no reason specified)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": 40000\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1490,"y":80,"wires":[["dae1723d.6a99f"]]},{"id":"dae1723d.6a99f","type":"mqtt out","z":"882af5a6.a58b28","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":2090,"y":80,"wires":[]},{"id":"8515bd04.5e05b","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":1450,"y":120,"wires":[["13ec32fe.d3a99d"]]},{"id":"998214b0.4c1f38","type":"json","z":"882af5a6.a58b28","name":"","property":"payload","action":"","pretty":false,"x":250,"y":40,"wires":[["c14538f4.87cec8"]]},{"id":"22e3fbe0.e64c64","type":"mqtt in","z":"882af5a6.a58b28","name":"MQTT-IN: activity","topic":"ia/+/+/+/activity","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":100,"y":40,"wires":[["998214b0.4c1f38"]]},{"id":"c14538f4.87cec8","type":"function","z":"882af5a6.a58b28","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":40,"wires":[["e6293a0b.38e8b8"]]},{"id":"e6293a0b.38e8b8","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":40,"wires":[["e25eb0a9.c84f1"]]},{"id":"5ae068fb.be12a8","type":"mqtt in","z":"882af5a6.a58b28","name":"MQTT-IN: detectedAnomaly","topic":"ia/+/+/+/detectedAnomaly","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":140,"y":120,"wires":[["8e9ed065.211af"]]},{"id":"8e9ed065.211af","type":"json","z":"882af5a6.a58b28","name":"","property":"payload","action":"","pretty":false,"x":330,"y":120,"wires":[["4a120d3d.8fad64"]]},{"id":"4a120d3d.8fad64","type":"function","z":"882af5a6.a58b28","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/detectedAnomaly\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":120,"wires":[["a82cfed9.9856a"]]},{"id":"a82cfed9.9856a","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":670,"y":120,"wires":[["39cac321.c87fbc"]]},{"id":"947fea87.7b4ba8","type":"debug","z":"882af5a6.a58b28","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":240,"wires":[]},{"id":"4b651e29.d8987","type":"function","z":"882af5a6.a58b28","name":"Was last state == machine running?","func":"if (flow.get(\"currentState\")==0) {\n return msg;\n} else {\n return null;\n}\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":360,"wires":[["de0540c3.06dbd"]]},{"id":"4888b756.23e248","type":"mqtt out","z":"ae592577.420618","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"1","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":570,"y":60,"wires":[]},{"id":"d996e872.8c0c88","type":"function","z":"ae592577.420618","name":"Format: processValue","func":"var namePV = env.get(\"namePV\")\nvar tempJSON = {\n\"timestamp_ms\": Date.now(),\n}\ntempJSON[namePV]=msg.payload;\nmsg.payload= tempJSON;\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/processValue\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":60,"wires":[["4888b756.23e248"]]},{"id":"a85c6ef3.fcf27","type":"function","z":"fc9d8f9c.14845","name":"Format: count","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"count\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/count\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":120,"wires":[["767ff1ad.008cd"]]},{"id":"767ff1ad.008cd","type":"mqtt out","z":"fc9d8f9c.14845","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":550,"y":120,"wires":[]},{"id":"1222fb98.eff494","type":"mqtt out","z":"b60b06bc.cdb4c8","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"","retain":"","broker":"5dff9791.d1b278","x":470,"y":80,"wires":[]},{"id":"c9fa6d5b.84b01","type":"function","z":"b60b06bc.cdb4c8","name":"Format: detectedAnomaly","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"detectedAnomaly\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/detectedAnomaly\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":80,"wires":[["1222fb98.eff494"]]},{"id":"6e72af6b.e6363","type":"function","z":"b77cb6f5.685178","name":"Format: Activity","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"activity\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":80,"wires":[["c68b3ec2.40d31"]]},{"id":"c68b3ec2.40d31","type":"mqtt out","z":"b77cb6f5.685178","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":570,"y":80,"wires":[]},{"id":"96c50010.c50af","type":"subflow:b77cb6f5.685178","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":550,"y":140,"wires":[]},{"id":"ae8cdaa6.a56a68","type":"subflow:b60b06bc.cdb4c8","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":590,"y":220,"wires":[]},{"id":"c8d8afe1.59fa","type":"subflow:fc9d8f9c.14845","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":550,"y":180,"wires":[]},{"id":"246a1685.58379a","type":"subflow:ae592577.420618","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":570,"y":260,"wires":[]},{"id":"7bb0392e.8a3bf8","type":"subflow:882af5a6.a58b28","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"},{"name":"customer_states","value":"","type":"str"}],"x":560,"y":100,"wires":[]},{"id":"b34237d9.7d2cc8","type":"subflow:9d0bf5c6.2530b8","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":580,"y":60,"wires":[]},{"id":"6e3f046.47cecfc","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":130,"y":60,"wires":[["96c50010.c50af"]]},{"id":"f8283b61.08d9e8","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"False","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"8","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"false","payloadType":"bool","x":130,"y":100,"wires":[["8dfcab17.6eb338"]]},{"id":"5b0afc76.d39564","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"Number","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"60000","payloadType":"num","x":140,"y":180,"wires":[["ae8cdaa6.a56a68"]]},{"id":"20f4ef35.92e22","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"15","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":130,"y":140,"wires":[["88623f34.27cac"]]},{"id":"5649a4d0.ce43ec","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"15","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":220,"wires":[["246a1685.58379a"]]},{"id":"c3372d57.50822","type":"mqtt in","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","topic":"ia/#","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":150,"y":500,"wires":[[]]},{"id":"a8e1a854.89e108","type":"s7 in","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","mode":"single","variable":"","diff":true,"name":"","x":150,"y":620,"wires":[[]]},{"id":"cdd3a9a3.ceed18","type":"s7 out","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","variable":"","name":"","x":150,"y":660,"wires":[]},{"id":"28b0d095.a6f2e","type":"http request","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"REST","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":150,"y":700,"wires":[[]]},{"id":"15717681.474919","type":"tcp request","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","server":"","port":"","out":"time","splitc":"0","name":"TCP-IP","x":160,"y":740,"wires":[[]]},{"id":"28ac3b5b.0c6e64","type":"inject","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":170,"y":540,"wires":[["6c82df5c.fb975"]]},{"id":"37c52f75.d6a81","type":"modbus-read","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"unitid":"","dataType":"","adr":"","quantity":"","rate":"","rateUnit":"","delayOnStart":false,"startDelayTime":"","server":"","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":170,"y":580,"wires":[[],[]]},{"id":"3b5e6754.ff4f18","type":"cronplus","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"Default shifts","outputField":"duration_in_minutes","timeZone":"Europe/Berlin","persistDynamic":false,"commandResponseMsgOutput":"output2","outputs":2,"options":[{"name":"shift_1","topic":"shift_1","payloadType":"num","payload":"180","expressionType":"cron","expression":"0 00 9 * * 1-5","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"},{"name":"schedule2","topic":"schedule2","payloadType":"num","payload":"400","expressionType":"cron","expression":"0 0 13 * * 1-5","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":150,"y":260,"wires":[["e61e8604.509d48"],[]]},{"id":"e61e8604.509d48","type":"subflow:587a158d.20327c","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[],"x":560,"y":300,"wires":[]},{"id":"8dfcab17.6eb338","type":"delay","z":"45f7c4f7.dff1cc","name":"","pauseType":"delay","timeout":"333","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":350,"y":140,"wires":[["96c50010.c50af"]]},{"id":"88623f34.27cac","type":"delay","z":"45f7c4f7.dff1cc","name":"","pauseType":"delay","timeout":"666","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":350,"y":180,"wires":[["c8d8afe1.59fa"]]},{"id":"6c82df5c.fb975","type":"OpcUa-Item","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","item":"","datatype":"","value":"","name":"","x":340,"y":540,"wires":[["392b9fc.5171e6"]]},{"id":"392b9fc.5171e6","type":"OpcUa-Client","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","action":"read","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"n","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","name":"","x":520,"y":540,"wires":[[]]},{"id":"69acedbea0a497d9","type":"inject","z":"41c9c6783cbe3070","name":"","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"ia/factoryinsight/test/test/count","x":210,"y":180,"wires":[["2ec74b8f684fec8a"]]},{"id":"2ec74b8f684fec8a","type":"function","z":"41c9c6783cbe3070","name":"","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"count\": 10\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":180,"wires":[["b5f390e651f93b89"]]},{"id":"b5f390e651f93b89","type":"mqtt out","z":"41c9c6783cbe3070","name":"","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":530,"y":180,"wires":[]}]

  settings: |-
    module.exports = {
        // the tcp port that the Node-RED web server is listening on
        uiPort: process.env.PORT || 1880,
        // By default, the Node-RED UI accepts connections on all IPv4 interfaces.
        // To listen on all IPv6 addresses, set uiHost to "::",
        // The following property can be used to listen on a specific interface. For
        // example, the following would only allow connections from the local machine.
        //uiHost: "127.0.0.1",
        // Retry time in milliseconds for MQTT connections
        mqttReconnectTime: 15000,
        // Retry time in milliseconds for Serial port connections
        serialReconnectTime: 15000,
        // Retry time in milliseconds for TCP socket connections
        //socketReconnectTime: 10000,
        // Timeout in milliseconds for TCP server socket connections
        //  defaults to no timeout
        //socketTimeout: 120000,
        // Maximum number of messages to wait in queue while attempting to connect to TCP socket
        //  defaults to 1000
        //tcpMsgQueueSize: 2000,
        // Timeout in milliseconds for HTTP request connections
        //  defaults to 120 seconds
        //httpRequestTimeout: 120000,
        // The maximum length, in characters, of any message sent to the debug sidebar tab
        debugMaxLength: 1000,
        // The maximum number of messages nodes will buffer internally as part of their
        // operation. This applies across a range of nodes that operate on message sequences.
        //  defaults to no limit. A value of 0 also means no limit is applied.
        //nodeMessageBufferMaxLength: 0,
        // To disable the option for using local files for storing keys and certificates in the TLS configuration
        //  node, set this to true
        //tlsConfigDisableLocalFiles: true,
        // Colourise the console output of the debug node
        //debugUseColors: true,
        // The file containing the flows. If not set, it defaults to flows_<hostname>.json
        //flowFile: 'flows.json',
        // To enabled pretty-printing of the flow within the flow file, set the following
        //  property to true:
        //flowFilePretty: true,
        // By default, credentials are encrypted in storage using a generated key. To
        // specify your own secret, set the following property.
        // If you want to disable encryption of credentials, set this property to false.
        // Note: once you set this property, do not change it - doing so will prevent
        // node-red from being able to decrypt your existing credentials and they will be
        // lost.
        //credentialSecret: "a-secret-key",
        // By default, all user data is stored in a directory called `.node-red` under
        // the user's home directory. To use a different location, the following
        // property can be used
        //userDir: '/home/nol/.node-red/',
        // Node-RED scans the `nodes` directory in the userDir to find local node files.
        // The following property can be used to specify an additional directory to scan.
        //nodesDir: '/home/nol/.node-red/nodes',
        // By default, the Node-RED UI is available at http://localhost:1880/
        // The following property can be used to specify a different root path.
        // If set to false, this is disabled.
        //httpAdminRoot: '/admin',
        // Some nodes, such as HTTP In, can be used to listen for incoming http requests.
        // By default, these are served relative to '/'. The following property
        // can be used to specifiy a different root path. If set to false, this is
        // disabled.
        //httpNodeRoot: '/red-nodes',
        // The following property can be used in place of 'httpAdminRoot' and 'httpNodeRoot',
        // to apply the same root to both parts.
        httpRoot: '/nodered',
        // When httpAdminRoot is used to move the UI to a different root path, the
        // following property can be used to identify a directory of static content
        // that should be served at http://localhost:1880/.
        //httpStatic: '/home/nol/node-red-static/',
        // The maximum size of HTTP request that will be accepted by the runtime api.
        // Default: 5mb
        //apiMaxLength: '5mb',
        // If you installed the optional node-red-dashboard you can set it's path
        // relative to httpRoot
        ui: { path: "ui" },
        // Securing Node-RED
        // -----------------
        // To password protect the Node-RED editor and admin API, the following
        // property can be used. See http://nodered.org/docs/security.html for details.
        //adminAuth: {},
        // To password protect the node-defined HTTP endpoints (httpNodeRoot), or
        // the static content (httpStatic), the following properties can be used.
        // The pass field is a bcrypt hash of the password.
        // See http://nodered.org/docs/security.html#generating-the-password-hash
        //httpNodeAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        //httpStaticAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        // The following property can be used to enable HTTPS
        // See http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
        // for details on its contents.
        // This property can be either an object, containing both a (private) key and a (public) certificate,
        // or a function that returns such an object:
        //// https object:
        //https: {
        //  key: require("fs").readFileSync('privkey.pem'),
        //  cert: require("fs").readFileSync('cert.pem')
        //},
        ////https function:
        // https: function() {
        //     // This function should return the options object, or a Promise
        //     // that resolves to the options object
        //     return {
        //         key: require("fs").readFileSync('privkey.pem'),
        //         cert: require("fs").readFileSync('cert.pem')
        //     }
        // },
        // The following property can be used to refresh the https settings at a
        // regular time interval in hours.
        // This requires:
        //   - the `https` setting to be a function that can be called to get
        //     the refreshed settings.
        //   - Node.js 11 or later.
        //httpsRefreshInterval : 12,
        // The following property can be used to cause insecure HTTP connections to
        // be redirected to HTTPS.
        //requireHttps: true,
        // The following property can be used to disable the editor. The admin API
        // is not affected by this option. To disable both the editor and the admin
        // API, use either the httpRoot or httpAdminRoot properties
        //disableEditor: false,
        // The following property can be used to configure cross-origin resource sharing
        // in the HTTP nodes.
        // See https://github.com/troygoode/node-cors#configuration-options for
        // details on its contents. The following is a basic permissive set of options:
        //httpNodeCors: {
        //    origin: "*",
        //    methods: "GET,PUT,POST,DELETE"
        //},
        // If you need to set an http proxy please set an environment variable
        // called http_proxy (or HTTP_PROXY) outside of Node-RED in the operating system.
        // For example - http_proxy=http://myproxy.com:8080
        // (Setting it here will have no effect)
        // You may also specify no_proxy (or NO_PROXY) to supply a comma separated
        // list of domains to not proxy, eg - no_proxy=.acme.co,.acme.co.uk
        // The following property can be used to add a custom middleware function
        // in front of all http in nodes. This allows custom authentication to be
        // applied to all http in nodes, or any other sort of common request processing.
        //httpNodeMiddleware: function(req,res,next) {
        //    // Handle/reject the request, or pass it on to the http in node by calling next();
        //    // Optionally skip our rawBodyParser by setting this to true;
        //    //req.skipRawBodyParser = true;
        //    next();
        //},
        // The following property can be used to add a custom middleware function
        // in front of all admin http routes. For example, to set custom http
        // headers
        // httpAdminMiddleware: function(req,res,next) {
        //    // Set the X-Frame-Options header to limit where the editor
        //    // can be embedded
        //    //res.set('X-Frame-Options', 'sameorigin');
        //    next();
        // },
        // The following property can be used to pass custom options to the Express.js
        // server used by Node-RED. For a full list of available options, refer
        // to http://expressjs.com/en/api.html#app.settings.table
        //httpServerOptions: { },
        // The following property can be used to verify websocket connection attempts.
        // This allows, for example, the HTTP request headers to be checked to ensure
        // they include valid authentication information.
        //webSocketNodeVerifyClient: function(info) {
        //    // 'info' has three properties:
        //    //   - origin : the value in the Origin header
        //    //   - req : the HTTP request
        //    //   - secure : true if req.connection.authorized or req.connection.encrypted is set
        //    //
        //    // The function should return true if the connection should be accepted, false otherwise.
        //    //
        //    // Alternatively, if this function is defined to accept a second argument, callback,
        //    // it can be used to verify the client asynchronously.
        //    // The callback takes three arguments:
        //    //   - result : boolean, whether to accept the connection or not
        //    //   - code : if result is false, the HTTP error status to return
        //    //   - reason: if result is false, the HTTP reason string to return
        //},
        // The following property can be used to seed Global Context with predefined
        // values. This allows extra node modules to be made available with the
        // Function node.
        // For example,
        //    functionGlobalContext: { os:require('os') }
        // can be accessed in a function block as:
        //    global.get("os")
        functionGlobalContext: {
            // os:require('os'),
            // jfive:require("johnny-five"),
            // j5board:require("johnny-five").Board({repl:false})
        },
        // `global.keys()` returns a list of all properties set in global context.
        // This allows them to be displayed in the Context Sidebar within the editor.
        // In some circumstances it is not desirable to expose them to the editor. The
        // following property can be used to hide any property set in `functionGlobalContext`
        // from being list by `global.keys()`.
        // By default, the property is set to false to avoid accidental exposure of
        // their values. Setting this to true will cause the keys to be listed.
        exportGlobalContextKeys: false,
        // Context Storage
        // The following property can be used to enable context storage. The configuration
        // provided here will enable file-based context that flushes to disk every 30 seconds.
        // Refer to the documentation for further options: https://nodered.org/docs/api/context/
        //
        //contextStorage: {
        //    default: {
        //        module:"localfilesystem"
        //    },
        //},
        // The following property can be used to order the categories in the editor
        // palette. If a node's category is not in the list, the category will get
        // added to the end of the palette.
        // If not set, the following default order is used:
        //paletteCategories: ['subflows', 'common', 'function', 'network', 'sequence', 'parser', 'storage'],
        // Configure the logging output
        logging: {
            // Only console logging is currently supported
            console: {
                // Level of logging to be recorded. Options are:
                // fatal - only those errors which make the application unusable should be recorded
                // error - record errors which are deemed fatal for a particular request + fatal errors
                // warn - record problems which are non fatal + errors + fatal errors
                // info - record information about the general running of the application + warn + error + fatal errors
                // debug - record information which is more verbose than info + info + warn + error + fatal errors
                // trace - record very detailed logging + debug + info + warn + error + fatal errors
                // off - turn off all logging (doesn't affect metrics or audit)
                level: "info",
                // Whether or not to include metric events in the log output
                metrics: false,
                // Whether or not to include audit events in the log output
                audit: false
            }
        },
        // Customising the editor
        editorTheme: {
            projects: {
                // To enable the Projects feature, set this value to true
                enabled: false
            }
        }
    }


### factoryinsight ###
factoryinsight:
  enabled: false
  image:
    repository: unitedmanufacturinghub/factoryinsight
    pullPolicy: IfNotPresent
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  replicas: 2
  user: "factoryinsight"
  version: 2  # Minimum api version to host (e.g: 2 will host v1 and v2, 3 will host v1, v2 and v3)
  # Password will be generated automatically
  db_host: "united-manufacturing-hub"
  db_database: "factoryinsight"
  db_user: "factoryinsight"
  redis:
    URI1: united-manufacturing-hub-redis-node-0.united-manufacturing-hub-redis-headless:26379
    URI2: united-manufacturing-hub-redis-node-1.united-manufacturing-hub-redis-headless:26379
    URI3: united-manufacturing-hub-redis-node-2.united-manufacturing-hub-redis-headless:26379
  service:
    annotations: {}
  pdb:
    enabled: false
  hpa:
    enabled: false
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 50Mi

### factoryinput ###
factoryinput:
  enabled: false
  user: factoryinsight
  service:
    annotations: {}
  image:
    repository: unitedmanufacturinghub/factoryinput
    pullPolicy: IfNotPresent
  replicas: 1
  storageRequest: 1Gi
  pdb:
    enabled: true
    minAvailable: 1
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: emQ1NHEzcWN3ajVNZnRkaXphbzJDZ1V6aEFsMnlxTlU=:100:wR0Br1UBGt5i2oruSbzNXJEicUEpcSwY/RmR8igExshAuEeLeFeWy82a9AOkkiGVBP2N2IMTBFRvY0W/lvQ8gA==

### grafanaproxy ###
grafanaproxy:
  enabled: false
  image:
    repository: unitedmanufacturinghub/grafana-proxy
    pullPolicy: IfNotPresent
  replicas: 1
  service:
    annotations: {}
    type: LoadBalancer
    port: 2096
    targetPort: 80
    protocol: TCP
    labels: {}
    portName: service
    name: http
  resources:
    limits:
      cpu: 1000m
    requests:
      cpu: 200m

### kafka-to-postgresql ###
kafkatopostgresql:
  enabled: false
  image:
    repository: unitedmanufacturinghub/kafka-to-postgresql
    pullPolicy: Always
    # tag: latest
  replicas: 1
  storageRequest: 1Gi
  listenTopic:
    # All topics except processValue
    # Kafka doesn't seem to be able to do negative lookaheads
    #highIntegrity: '^ia\..+\..+\..+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$'
    #highThroughput: '^ia\..+\..+\..+\.(process[V|v]alue).*$'
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 50m
      memory: 50Mi

### minio ###
operator:
  operator:
    replicaCount: 2
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
        ephemeral-storage: 500Mi

tenant:
  ## MinIO Tenant Definition
  tenants:
    # Tenant name
    - name: umhminio
      ## Registry location and Tag to download MinIO Server image
      ## Customize namespace for tenant deployment
      namespace: "united-manufacturing-hub"
      ## Customize any private registry image pull secret.
      ## currently only one secret registry is supported
      imagePullSecret: {}
      ## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
      ## If not specified, the Tenant pods will be dispatched by default scheduler.
      scheduler: {}
      ## Specification for MinIO Pool(s) in this Tenant.
      pools:
        ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
        ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
        ## Note that the operator does not support upgrading from standalone to distributed mode.
        - servers: 1
          ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
          volumesPerServer: 4
          ## size specifies the capacity per volume
          size: 1Gi
          ## storageClass specifies the storage class name to be used for this pool
          ## local-path only works in k3s / development setups. Change for production setups.
          storageClassName: ""
          ## Used to specify a toleration for a pod
          tolerations: {}
          ## nodeSelector parameters for MinIO Pods. It specifies a map of key-value pairs. For the pod to be
          ## eligible to run on a node, the node must have each of the
          ## indicated key-value pairs as labels.
          ## Read more here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          nodeSelector: {}
          ## Affinity settings for MinIO pods. Read more about affinity
          ## here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
          affinity: {}
          ## Configure resource requests and limits for MinIO containers
          resources: {}
          ## Configure security context
          securityContext: {}
      ## Mount path where PV will be mounted inside container(s).
      mountPath: /export
      ## Sub path inside Mount path where MinIO stores data.
      subPath: /data
      # pool secrets
      secrets:
        enabled: true
        name: umhminio-secret
        accessKey: minio
        secretKey: minio123
      # pool metrics to be read by Prometheus
      metrics:
        enabled: false
        port: 9000
      certificate:
        ## Use this field to provide one or more external CA certificates. This is used by MinIO
        ## to verify TLS connections with other applications:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCaCertSecret: {}
        ## Use this field to provide a list of Secrets with external certificates. This can be used to configure
        ## TLS for MinIO Tenant pods. Create secrets as explained here:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCertSecret: {}
        ## Enable automatic Kubernetes based certificate generation and signing as explained in
        ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
        requestAutoCert: true
        ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
        ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
        ## not provided. DNS name format is *.minio.default.svc.cluster.local
        certConfig: {}
      ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
      ## accessible as DNS entries of form `<bucketname>.minio.default.svc.cluster.local`
      s3:
        ## This feature is turned off by default
        bucketDNS: false
      ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
      ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
      ## for details.
      podManagementPolicy: Parallel
      ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
      ## services created by the operator.
      serviceMetadata: {}
      ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
      env: {}
      ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
      ## This is applied to MinIO pods only.
      ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
      priorityClassName: ""

### timescaleDB ###
timescaledb-single:
  # This file and its contents are licensed under the Apache License 2.0.
  # Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

  replicaCount: 1

  # To prevent very long names, we override the name, otherwise it would default to
  # timescaledb-single (the name of the chart)
  nameOverride: timescaledb

  # The default Patroni name of the cluster ("scope") is derived from the name of the release,
  # but you can override this behaviour here
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#global-universal
  clusterName:

  # The major PostgreSQL version to use, defaults to the default version of the Docker image
  # However, in pg_upgrade scenarios, you may need to specify an explicit version
  version:

  image:
    # Image was built from
    # https://github.com/timescale/timescaledb-docker-ha
    repository: timescale/timescaledb-ha
    tag: pg13.8-ts2.8.0-p1
    pullPolicy: Always

  # These secrets should exist before the Helm is used to deploy this TimescaleDB.
  # You can use generate_kustomization.sh to help in creating these secrets, or have
  # a look at kustomize/example to see how you could install them.
  secretNames:
    # This secret should contain environment variables that influence Patroni,
    # for example PATRONI_SUPERUSER_PASSWORD or PATRONI_REPLICATION_PASSWORD
    # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#postgresql
    credentials:  # defaults to RELEASE-credentials

    # This secret should be a Secret of type kubernetes.io/tls, containing
    # both a tls.key and a tls.crt
    certificate:  # defaults to RELEASE-certificate

    # This secret should contain environment variables that influence pgBackRest,
    # for example, PGBACKREST_REPO1_S3_KEY or PGBACKREST_REPO1_S3_KEY_SECRET
    pgbackrest:  # defaults to RELEASE-pgbackrest

  backup:
    enabled: false
    pgBackRest:
      # https://pgbackrest.org/configuration.html
      # Although not impossible, care should be taken not to include secrets
      # in these parameters. Use Kubernetes Secrets to specify S3 Keys, Secrets etc.
      compress-type: lz4
      process-max: 4
      start-fast: "y"
      repo1-retention-diff: 2
      repo1-retention-full: 2
      repo1-type: s3
      repo1-cipher-type: "none"
      repo1-s3-region: us-east-2
      repo1-s3-endpoint: s3.amazonaws.com

    # Overriding the archive-push/archive-get sections is most useful in
    # very high througput situations. Look at values/high_throuhgput_example.yaml for more details
    pgBackRest:archive-push: {}
    pgBackRest:archive-get: {}
    jobs:
      # name: needs to adhere to the kubernetes restrictions
      # type: can be full, incr or diff, see https://pgbackrest.org/user-guide.html
      # schedule: https://en.wikipedia.org/wiki/Cron#CRON_expression
      - name: full-weekly
        type: full
        schedule: "12 02 * * 0"
      - name: incremental-daily
        type: incr
        schedule: "12 02 * * 1-6"
    # Extra custom environment variables for the backup container.
    envFrom:
    # - secretRef:
    #     name: extra-pgbackrest-secrets

    # Alternatively, you can expose individual environment variables:
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
    # Although not impossible, care should be taken not to include secrets
    # in these parameters. Use Kubernetes Secrets to specify S3 Keys, Secrets etc.
    env:
    # - name: PGBACKREST_REPO1_S3_BUCKET
    #   value: my_example_s3_bucket_for_backups
    # - name: PGBACKREST_REPO1_S3_KEY_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name: pgbackrest-dev-secrets
    #       key: repo1-s3-key-secret

  # When creating a *new* deployment, the default is to initialize (using initdb) the database.
  # If however, you want to initialize the database using an existing backup, you can do so by
  # configuring this section.
  #
  # WARNING: You *should not* run 2 identically named deployments in separate Kubernetes
  #          clusters using the same S3 bucket for backups.
  bootstrapFromBackup:
    enabled: false
    # Setting the s3 path is mandatory to avoid overwriting an already existing backup,
    # and to be sure the restore is explicitly the one requested.
    repo1-path:
    # Here you can (optionally) provide a Secret to configure the restore process further.
    # For example, if you need to specify a different restore bucket, you should set
    # PGBACKREST_REPO1_S3_BUCKET: <base64 encoded value of the bucket> in these secrets
    secretName: pgbackrest-bootstrap


  # Extra custom environment variables.
  # These should be an EnvVar, as this allows you to inject secrets into the environment
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
  env:
  #  - name: NOT_A_SECRET
  #    value: "test"
  #  - name: MYAPPLICATION_STANDBY_PASSWORDS
  #    valueFrom:
  #      secretKeyRef:
  #        name: myapplication-passwords
  #        key: standby

  # Externally created Kubernetes secrets will be injected into the pods by referencing them here. You
  # can also add more configuration options and secrets this way (see https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables)
  envFrom:
  #  - configMapRef:
  #      name: my-deployment-settings
  #      optional: true


  # This configuration will be passed on to Patroni directly, there are a few things that are
  # injected/changed, these are:
  #   - archive_command will be set to /bin/true if backup is disabled
  #   - any context sensitive parameter (scope, namespace, name) will be overridden by the Kubernetes context
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#settings
  patroni:
    log:
      level: WARNING
    # https://patroni.readthedocs.io/en/latest/replica_bootstrap.html#bootstrap
    bootstrap:
      method: restore_or_initdb
      restore_or_initdb:
        command: >
          /etc/timescaledb/scripts/restore_or_initdb.sh
          --encoding=UTF8
          --locale=C.UTF-8
        keep_existing_recovery_conf: true
      post_init: /etc/timescaledb/scripts/post_init.sh
      dcs:
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        postgresql:
          parameters:
            archive_command: "/etc/timescaledb/scripts/pgbackrest_archive.sh %p"
            archive_mode: 'on'
            archive_timeout: 1800s
            #
            # Autovacuuming is very important to PostgreSQL. For TimescaleDB, in
            # most usecases the vacuuming part is of less importance (there are no deleted tuples to prune)
            # however, the autoanalyze bit (updating the statistics of the chunks) is important to help
            # in planning queries. Therefore we do some tuning of autovacuum to address these
            # TimescaleDB specific concerns.
            # We'd rather have autovacuum do things early, as this increases the changes that autovacuum
            # will find the buffers it needs in shared_buffers, instead of having to fetch them from disk.
            #
            autovacuum_analyze_scale_factor: 0.02
            # This allows us to auto-analyze at most 120 (pretty much empty) chunks every 5 seconds
            # This will ensure that we can have up-to-date statistics on inserts very, very quickly
            autovacuum_naptime: 5s
            autovacuum_max_workers: 10
            # We don't want vacuum work to be building up, therefore we increase
            # the cost limit so that the work to be done for vacuum will be done quickly.
            autovacuum_vacuum_cost_limit: 500
            autovacuum_vacuum_scale_factor: 0.05
            log_autovacuum_min_duration: 1min
            hot_standby: 'on'
            log_checkpoints: 'on'
            log_connections: 'on'
            log_disconnections: 'on'
            log_line_prefix: "%t [%p]: [%c-%l] %u@%d,app=%a [%e] "
            log_lock_waits: 'on'
            log_min_duration_statement: '1s'
            log_statement: ddl
            max_connections: 100
            max_prepared_transactions: 150
            shared_preload_libraries: timescaledb,pg_stat_statements
            ssl: 'on'
            ssl_cert_file: '/etc/certificate/tls.crt'
            ssl_key_file: '/etc/certificate/tls.key'
            tcp_keepalives_idle: 900
            tcp_keepalives_interval: 100
            temp_file_limit: 1GB
            timescaledb.passfile: '../.pgpass'
            unix_socket_directories: "/var/run/postgresql"
            unix_socket_permissions: '0750'
            wal_level: hot_standby
            wal_log_hints: 'on'
          use_pg_rewind: true
          use_slots: true
        retry_timeout: 10
        ttl: 30
    kubernetes:
      role_label: role
      scope_label: cluster-name
      use_endpoints: true
    postgresql:
      create_replica_methods:
        - basebackup
      pgbackrest:
        command: /etc/timescaledb/scripts/pgbackrest_restore.sh
        keep_data: true
        no_params: true
        no_master: true
      basebackup:
        - waldir: "/var/lib/postgresql/wal/pg_wal"
      recovery_conf:
        restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
      callbacks:
        on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
        on_start: /etc/timescaledb/scripts/patroni_callback.sh
        on_reload: /etc/timescaledb/scripts/patroni_callback.sh
        on_restart: /etc/timescaledb/scripts/patroni_callback.sh
        on_stop: /etc/timescaledb/scripts/patroni_callback.sh
      authentication:
        replication:
          username: standby
        superuser:
          username: postgres
      listen: 0.0.0.0:5432
      pg_hba:
        - local     all             postgres                              peer
        - local     all             all                                   md5
        - hostnossl all,replication all                all                reject
        - hostssl   all             all                127.0.0.1/32       md5
        - hostssl   all             all                ::1/128            md5
        - hostssl   replication     standby            all                md5
        - hostssl   all             all                all                md5
      use_unix_socket: true
    restapi:
      listen: 0.0.0.0:8008

  callbacks:
    # If set, this configMap will be used for the Patroni callbacks.
    configMap:  # example-patroni-callbacks

  postInit:
    # A list of sources, that contain post init scripts.
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#projectedvolumesource-v1-core
    # These scripts are all projected to the same directory and will be executed
    # in sorted order only once: After a cluster initialization
    # Some examples:
    - configMap:
        name: timescale-post-init
        optional: false
    - secret:
        name: timescale-post-init-pw
        optional: false


  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  persistentVolumes:
    # For sanity reasons, the actual PGDATA and wal directory will be subdirectories of the Volume mounts,
    # this allows Patroni/a human/an automated operator to move directories during bootstrap, which cannot
    # be done if we did not use subdirectories
    # https://www.postgresql.org/docs/current/creating-cluster.html#CREATING-CLUSTER-MOUNT-POINTS
    data:
      enabled: true
      size: 2Gi
      ## database data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      subPath: ""
      mountPath: "/var/lib/postgresql"
      annotations: {}
      accessModes:
        - ReadWriteOnce
    # WAL will be a subdirectory of the data volume, which means enabling a separate
    # volume for the WAL files should just work for new pods.
    wal:
      enabled: true
      size: 1Gi
      subPath: ""
      storageClass:
      # When changing this mountPath ensure you also change the following key to reflect this:
      # patroni.postgresql.basebackup.[].waldir
      mountPath: "/var/lib/postgresql/wal"
      annotations: {}
      accessModes:
        - ReadWriteOnce
      # Any tablespace mentioned here requires a volume that will be associated with it.
      # tablespaces:
      # example1:
      #   size: 5Gi
      #   storageClass: gp2
      # example2:
      #   size: 5Gi
      #   storageClass: gp2

  # EXPERIMENTAL, please do *not* enable on production environments
  # if enabled, fullWalPrevention will switch the default transaction mode from read write
  # to read only if thresholds are breached.
  fullWalPrevention:
    enabled: false
    checkFrequency: 30
    # To prevent the default transaction mode from switching constantly, we have separate
    # thresholds for switching to read-only and read-write
    thresholds:
      readOnlyFreePercent: 5
      readOnlyFreeMB: 64
      readWriteFreePercent: 8
      readWriteFreeMB: 128

  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  sharedMemory:
    # By default Kubernetes only provides 64MB to /dev/shm
    # /dev/shm is only used by PostgreSQL for work_mem for parallel workers,
    # so most will not run into this issue.
    # https://github.com/kubernetes/kubernetes/issues/28272
    #
    # If you do however run into:
    #
    #   SQLSTATE 53100
    #   ERROR:  could not resize shared memory segment "/PostgreSQL.12345" to 4194304 bytes:
    #   No space left on device
    #
    # you may wish to use a mount to Memory, by setting useMount to true
    useMount: false

  # timescaledb-tune will be run with the Pod resources requests or - if not set - its limits.
  # This should give a reasonably tuned PostgreSQL instance.
  # Any PostgreSQL parameter that is explicitly set in the Patroni configuration will override
  # the auto-tuned variables.
  timescaledbTune:
    enabled: true
    # For full flexibility, we allow you to override any timescaledb-tune parameter below.
    # However, these parameters only take effect on newly scheduled pods and their settings are
    # only visibible inside those new pods.
    # Therefore you probably want to set explicit overrides in patroni.bootstrap.dcs.postgresql.parameters,
    # as those will take effect as soon as possible.
    # https://github.com/timescale/timescaledb-tune
    args: {}
      # max-conns: 120
      # cpus: 5
    # memory: 4GB

  # pgBouncer does connection pooling for PostgreSQL
  # https://www.pgbouncer.org/
  # enabling pgBouncer will run an extra container in every Pod, serving a pgBouncer
  # pass-through instance
  pgBouncer:
    enabled: false
    port: 6432
    config:
      # DANGER: The below settings are considered to be safe to set, and we recommend
      # you do set these to appropriate values for you.
      # However, for flexibility, we do allow the override of any pg_bouncer setting
      # many of which are vital to the operation of this helm chart.
      # The values we do not suggest altering are set in the template
      # https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/templates/configmap-pgbouncer.yaml#L35-L50
      # Only override these settings if you are confident of  what you are doing.
      server_reset_query: DISCARD ALL
      max_client_conn: 500
      default_pool_size: 12
      pool_mode: transaction
    pg_hba:
      - local     all postgres                   peer
      - host      all postgres,standby 0.0.0.0/0 reject
      - host      all postgres,standby ::0/0     reject
      - hostssl   all all              0.0.0.0/0 md5
      - hostssl   all all              ::0/0     md5
      - hostnossl all all              0.0.0.0/0 reject
      - hostnossl all all              ::0/0     reject
    # Secret should contain user/password pairs in the format expected by pgbouncer
    # https://www.pgbouncer.org/config.html#authentication-file-format
    # example:
    # userlist.txt: |
    #   "username" "hashedpassword"
    #   "username2" "hashedpassword2"
    userListSecretName:

  networkPolicy:
    enabled: false
    prometheusApp: prometheus
    # Below you can specify a whitelist of Ingress rules, for more information:
    # https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource
    ingress:
    # - from:
    #   - podSelector:
    #       matchLabels:
    #         app: foo
    #   ports:
    #   - protocol: TCP
    #       port: 11111

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  # Prometheus exporter for PostgreSQL server metrics.
  # https://github.com/wrouesnel/postgres_exporter
  prometheus:
    enabled: false
    # Extra custom environment variables for prometheus.
    # These should be an EnvVar, as this allows you to inject secrets into the environment
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
    env:
    # - name: NOT_A_SECRET
    #   value: "test"
    # - name: MYAPPLICATION_STANDBY_PASSWORDS
    #   valueFrom:
    #     secretKeyRef:
    #       name: myapplication-passwords
    #       key: standby
    # Additional volumes for prometheus, e.g., to support additional queries.
    # These should be a Volume, as this allows you to inject any kind of Volume
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#volume-v1-core
    volumes:
    # - name: exporter-config
    #   configMap:
    #     name: exporter-prometheus
    #     items:
    #       - key: metrics_queries
    #         path: queries.yaml
    # Additional volume mounts, to be used in conjunction with the above variable.
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#volumemount-v1-core
    volumeMounts:
    # - name: exporter-config
    #   mountPath: /var/exporter

  # For new deployments, we would advise Parallel here, however as that change breaks previous
  # deployments, it is set to OrderedReady here
  podManagementPolicy: OrderedReady

  # Annotations that are applied to each pod in the stateful set
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}

  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinityTemplate: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels:
              app: {{template "timescaledb.fullname" .}}
              release: {{.Release.Name | quote}}
              cluster-name: {{template "clusterName" .}}
      - weight: 50
        podAffinityTerm:
          topologyKey: failure-domain.beta.kubernetes.io/zone
          labelSelector:
            matchLabels:
              app: {{template "timescaledb.fullname" .}}
              release: {{.Release.Name | quote}}
              cluster-name: {{template "clusterName" .}}
  affinity: {}

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Setting unsafe to true will generate some random credentials. This is meant
  # for development or first evaluation of the Helm Charts. It should *not* be
  # used for anything beyong the evaluation phase.
  unsafe: false

  debug:
    # This setting is mainly for during development, debugging or troubleshooting.
    # This command will be executed *before* the main container starts. In the
    # example below, we can mimick a slow restore by sleeping for 5 minutes before starting
    execStartPre:  # sleep 300

### grafana ###
grafana:
  rbac:
    create: true
    ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
    # useExistingRole: name-of-some-(cluster)role
    pspEnabled: true
    pspUseAppArmor: true
    namespaced: false
    extraRoleRules: []
    # - apiGroups: []
    #   resources: []
    #   verbs: []
    extraClusterRoleRules: []
    # - apiGroups: []
    #   resources: []
    #   verbs: []
  serviceAccount:
    create: true
    name:
    nameTest:
  #  annotations:
  #    eks.amazonaws.com/role-arn: arn:aws:iam::123456789000:role/iam-role-name-here

  replicas: 1

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    minAvailable: 1
  #  maxUnavailable: 1

  ## See `kubectl explain deployment.spec.strategy` for more
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  deploymentStrategy:
    type: RollingUpdate

  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000

  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 10

  image:
    repository: grafana/grafana
    tag: 8.5.9
    sha: ""
    pullPolicy: IfNotPresent

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName: "default-scheduler"

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  testFramework:
    enabled: false

  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472

  containerSecurityContext:
    {}

  extraConfigmapMounts: []
    # - name: certs-configmap
    #   mountPath: /etc/grafana/ssl/
    #   subPath: certificates.crt # (optional)
    #   configMap: certs-configmap
  #   readOnly: true


  extraEmptyDirMounts: []
    # - name: provisioning-notifiers
  #   mountPath: /etc/grafana/provisioning/notifiers


  # Apply extra labels to common labels.
  extraLabels: {}

  ## Assign a PriorityClassName to pods if set
  # priorityClassName:

  downloadDashboards:
    env: {}
    envFromSecret: ""
    resources: {}

  ## Pod Annotations
  # podAnnotations: {}

  ## Pod Labels
  # podLabels: {}

  podPortName: grafana

  ## Deployment annotations
  # annotations: {}

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: LoadBalancer
    port: 8080
    targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
    annotations: {}
    labels: {}
    portName: service

  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false
    path: /metrics
    #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
    labels: {}
    interval: 1m
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s
    relabelings: []

  extraExposePorts: []
    # - name: keycloak
    #   port: 8080
    #   targetPort: 8080
  #   type: ClusterIP

  # overrides pod.spec.hostAliases in the grafana deployment's pods
  hostAliases: []
    # - ip: "1.2.3.4"
    #   hostnames:
  #     - "my.host.com"

  ingress:
    enabled: false
    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx
    # Values can be templated
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    labels: {}
    path: /

    # pathType is only for k8s > 1.19
    pathType: Prefix

    hosts:
      - chart-example.local
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## Or for k8s > 1.19
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: service


    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  extraInitContainers:
    - image: unitedmanufacturinghub/grafana-plugin-extractor:0.1.4
      imagePullPolicy: IfNotPresent
      name: init-umh-datasource
      volumeMounts:
        - mountPath: /var/lib/grafana
          name: storage

          # subPath: ia-factoryinsight-datasource.zip
  ## Enable a Specify container in extraContainers. This is meant to allow adding an authentication proxy to a grafana pod
  extraContainers: |
  # - name: proxy
  #   image: quay.io/gambol99/keycloak-proxy:latest
  #   args:
  #   - -provider=github
  #   - -client-id=
  #   - -client-secret=
  #   - -github-org=<ORG_NAME>
  #   - -email-domain=*
  #   - -cookie-secret=
  #   - -http-address=http://0.0.0.0:4181
  #   - -upstream-url=http://127.0.0.1:3000
  #   ports:
  #     - name: proxy-web
  #       containerPort: 4181


  ## Enable persistence using Persistent Volume Claims0
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    type: pvc
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    # annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    # selectorLabels: {}
    # subPath: ""
    # existingClaim:

    ## If persistence is not enabled, this allows to mount the
    ## local storage in-memory to improve performance
    ##
    inMemory:
      enabled: false
      ## The maximum usage on memory medium EmptyDir would be
      ## the minimum value between the SizeLimit specified
      ## here and the sum of memory limits of all containers in a pod
      ##
      # sizeLimit: 300Mi

  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    ##
    enabled: true


    ## initChownData resource requests and limits
    ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 128Mi


  # Administrator credentials when not using an existing secret (see below)
  adminUser: admin
  # adminPassword: strongpassword

  # Use an existing secret for the admin user.
  admin:
    existingSecret: "grafana-secret"
    userKey: adminuser
    passwordKey: adminpassword

  ## Define command to be executed at startup by grafana container
  ## Needed if using `vault-env` to manage secrets (ref: https://banzaicloud.com/blog/inject-secrets-into-pods-vault/)
  ## Default is "run.sh" as defined in grafana's Dockerfile
  # command:
  # - "sh"
  # - "/run.sh"

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Extra environment variables that will be pass onto deployment pods
  ##
  ## to provide grafana with access to CloudWatch on AWS EKS:
  ## 1. create an iam role of type "Web identity" with provider oidc.eks.* (note the provider for later)
  ## 2. edit the "Trust relationships" of the role, add a line inside the StringEquals clause using the
  ## same oidc eks provider as noted before (same as the existing line)
  ## also, replace NAMESPACE and prometheus-operator-grafana with the service account namespace and name
  ##
  ##  "oidc.eks.us-east-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:sub": "system:serviceaccount:NAMESPACE:prometheus-operator-grafana",
  ##
  ## 3. attach a policy to the role, you can use a built in policy called CloudWatchReadOnlyAccess
  ## 4. use the following env: (replace 123456789000 and iam-role-name-here with your aws account number and role name)
  ##
  ## env:
  ##   AWS_ROLE_ARN: arn:aws:iam::123456789000:role/iam-role-name-here
  ##   AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
  ##   AWS_REGION: us-east-1
  ##
  ## 5. uncomment the EKS section in extraSecretMounts: below
  ## 6. uncomment the annotation section in the serviceAccount: above
  ## make sure to replace arn:aws:iam::123456789000:role/iam-role-name-here with your role arn

  env:
    GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: umh-datasource,umh-factoryinput-panel,umh-v2-datasource

  ## "valueFrom" environment variable references that will be added to deployment pods
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom:
    FACTORYINSIGHT_BASEURL:
      secretKeyRef:
        name: factoryinsight-secret
        key: baseURL
    FACTORYINSIGHT_APIKEY:
      secretKeyRef:
        name: factoryinsight-secret
        key: apiKey
    FACTORYINSIGHT_CUSTOMERID:
      secretKeyRef:
        name: factoryinsight-secret
        key: customerID
    FACTORYINSIGHT_PASSWORD:
      secretKeyRef:
        name: factoryinsight-secret
        key: password


  ## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
  ## This can be useful for auth tokens, etc. Value is templated.
  envFromSecret: ""

  ## Sensible environment variables that will be rendered as new secret object
  ## This can be useful for auth tokens, etc
  envRenderSecret: {}

  ## Additional grafana server secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  extraSecretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   secretName: grafana-secret-files
    #   readOnly: true
    #   subPath: ""
    #
    # for AWS EKS (cloudwatch) use the following (see also instruction in env: above)
    # - name: aws-iam-token
    #   mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
    #   readOnly: true
    #   projected:
    #     defaultMode: 420
    #     sources:
    #       - serviceAccountToken:
    #           audience: sts.amazonaws.com
    #           expirationSeconds: 86400
    #           path: token
    #
    # for CSI e.g. Azure Key Vault use the following
    # - name: secrets-store-inline
    #  mountPath: /run/secrets
    #  readOnly: true
    #  csi:
    #    driver: secrets-store.csi.k8s.io
    #    readOnly: true
    #    volumeAttributes:
    #      secretProviderClass: "akv-grafana-spc"
    #    nodePublishSecretRef:                       # Only required when using service principal mode
  #       name: grafana-akv-creds                  # Only required when using service principal mode

  ## Additional grafana server volume mounts
  # Defines additional volume mounts.
  extraVolumeMounts: []
    # - name: extra-volume-0
    #   mountPath: /mnt/volume0
    #   readOnly: true
    #   existingClaim: volume-claim
    # - name: extra-volume-1
    #   mountPath: /mnt/volume1
    #   readOnly: true
  #   hostPath: /usr/shared/

  ## Pass the plugins you want installed as a list.
  ##
  plugins:
    - grafana-worldmap-panel
    - grafana-piechart-panel
    - aceiot-svg-panel
    - grafana-worldmap-panel
    - natel-discrete-panel
    - isaozler-paretochart-panel
    - williamvenner-timepickerbuttons-panel
    - agenty-flowcharting-panel
    - marcusolsson-dynamictext-panel
    - factry-untimely-panel
    - cloudspout-button-panel

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: umh-v2-datasource
          # <string, required> datasource type. Required
          type: umh-v2-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          # <string> custom UID which can be used to reference this datasource in other parts of the configuration, if not specified will be generated automatically
          jsonData:
            customerID: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            baseURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: false
          editable: false
        # <string, required> name of the datasource. Required
        - name: umh-datasource
          # <string, required> datasource type. Required
          type: umh-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          # <string> custom UID which can be used to reference this datasource in other parts of the configuration, if not specified will be generated automatically
          jsonData:
            customerId: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            serverURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: true
          editable: false
        # <string, required> name of the datasource. Required

  ## Configure notifiers
  ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
  ##
  notifiers: {}
  #  notifiers.yaml:
  #    notifiers:
  #    - name: email-notifier
  #      type: email
  #      uid: email1
  #      # either:
  #      org_id: 1
  #      # or
  #      org_name: Main Org.
  #      is_default: true
  #      settings:
  #        addresses: an_email_address@example.com
  #    delete_notifiers:

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders: {}
  #  dashboardproviders.yaml:
  #    apiVersion: 1
  #    providers:
  #    - name: 'default'
  #      orgId: 1
  #      folder: ''
  #      type: file
  #      disableDeletion: false
  #      editable: true
  #      options:
  #        path: /var/lib/grafana/dashboards/default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards: {}
    # default:
    #   some-dashboard:
    #     json: |
    #       $RAW_JSON
    #   custom-dashboard:
    #     file: dashboards/custom-dashboard.json
    #   prometheus-stats:
    #     gnetId: 2
    #     revision: 2
    #     datasource: Prometheus
    #   local-dashboard:
    #     url: https://example.com/repository/test.json
    #     token: ''
    #   local-dashboard-base64:
    #     url: https://example.com/repository/test-b64.json
    #     token: ''
  #     b64content: true

  ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
  ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
  ## ConfigMap data example:
  ##
  ## data:
  ##   example-dashboard.json: |
  ##     RAW_JSON
  ##
  dashboardsConfigMaps: {}
  #  default: ""

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    database:
      host: united-manufacturing-hub
      user: "grafana"
      name: "grafana"
      password: "changeme"
      ssl_mode: require
      type: postgres
        ## grafana Authentication can be enabled with the following values on grafana.ini
        # server:
      # The full public facing url you use in browser, used for redirects and emails
    #    root_url:
    # https://grafana.com/docs/grafana/latest/auth/github/#enable-github-in-grafana
    # auth.github:
    #    enabled: false
    #    allow_sign_up: false
    #    scopes: user:email,read:org
    #    auth_url: https://github.com/login/oauth/authorize
    #    token_url: https://github.com/login/oauth/access_token
    #    api_url: https://api.github.com/user
    #    team_ids:
    #    allowed_organizations:
    #    client_id:
    #    client_secret:
    ## LDAP Authentication can be enabled with the following values on grafana.ini
    ## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
    # auth.ldap:
    #   enabled: true
    #   allow_sign_up: true
    #   config_file: /etc/grafana/ldap.toml

  ## Grafana's LDAP configuration
  ## Templated by the template in _helpers.tpl
  ## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
  ## ref: http://docs.grafana.org/installation/ldap/#configuration
  ldap:
    enabled: false
    # `existingSecret` is a reference to an existing secret containing the ldap configuration
    # for Grafana in a key `ldap-toml`.
    existingSecret: ""
    # `config` is the content of `ldap.toml` that will be stored in the created secret
    config: ""
    # config: |-
    #   verbose_logging = true

    #   [[servers]]
    #   host = "my-ldap-server"
    #   port = 636
    #   use_ssl = true
    #   start_tls = false
    #   ssl_skip_verify = false
    #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana.
    existingSecret: ""
    userKey: "user"
    passwordKey: "password"

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    imagePullPolicy: IfNotPresent
    resources: {}
    #   limits:
    #     cpu: 100m
    #     memory: 100Mi
    #   requests:
    #     cpu: 50m
    #     memory: 50Mi
    # skipTlsVerify Set to true to skip tls verification for kube api calls
    # skipTlsVerify: true
    enableUniqueFilenames: false
    dashboards:
      enabled: false
      SCProvider: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      # value of label that the configmaps with dashboards are set to
      labelValue: null
      # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
      folder: /tmp/dashboards
      # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
      defaultFolderName: null
      # If specified, the sidecar will search for dashboard config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
      # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
      # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
      folderAnnotation: null
      # provider configuration that lets grafana manage the dashboards
      provider:
        # name of the provider, should be unique
        name: sidecarProvider
        # orgid as configured in grafana
        orgid: 1
        # folder in which the dashboards should be imported in grafana
        folder: ''
        # type of the provider
        type: file
        # disableDelete to activate a import-only behaviour
        disableDelete: false
        # allow updating provisioned dashboards from the UI
        allowUiUpdates: false
        # allow Grafana to replicate dashboard structure from filesystem
        foldersFromFilesStructure: false
    datasources:
      enabled: false
      # label that the configmaps with datasources are marked with
      label: grafana_datasource
      # value of label that the configmaps with datasources are set to
      labelValue: null
      # If specified, the sidecar will search for datasource config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
    notifiers:
      enabled: false
      # label that the configmaps with notifiers are marked with
      label: grafana_notifier
      # If specified, the sidecar will search for notifier config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null

  ## Override the deployment namespace
  ##
  namespaceOverride: ""

  ## Number of old ReplicaSets to retain
  ##
  revisionHistoryLimit: 10

  ## Add a seperate remote image renderer deployment/service
  imageRenderer:
    # Enable the image-renderer deployment & service
    enabled: false
    replicas: 1
    # extra environment variables
    env:
      HTTP_HOST: "0.0.0.0"
      # RENDERING_ARGS: --disable-gpu,--window-size=1280x758
      # RENDERING_MODE: clustered
    # image-renderer deployment serviceAccount
    serviceAccountName: ""
    # image-renderer deployment securityContext
    securityContext: {}
    # image-renderer deployment Host Aliases
    hostAliases: []
    # image-renderer deployment priority class
    priorityClassName: ''
    service:
      # image-renderer service port name
      portName: 'http'
      # image-renderer service port used by both service and deployment
      port: 8081
      targetPort: 8081
    # In case a sub_path is used this needs to be added to the image renderer callback
    grafanaSubPath: ""
    # name of the image-renderer port on the pod
    podPortName: http
    # number of image-renderer replica sets to keep
    revisionHistoryLimit: 10
    networkPolicy:
      # Enable a NetworkPolicy to limit inbound traffic to only the created grafana pods
      limitIngress: true
      # Enable a NetworkPolicy to limit outbound traffic to only the created grafana pods
      limitEgress: false
    resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 50m
  #     memory: 50Mi

### kowl ###
kowl:
  kowl:
    config:
      kafka:
        brokers:
          - united-manufacturing-hub-kafka:9092
        tls:
          enabled: false
          caFilepath: "/SSL_certs/kafka/ca.crt"
          certFilepath: "/SSL_certs/kafka/tls.crt"
          keyFilepath: "/SSL_certs/kafka/tls.key"
          passphrase: ""
  extraVolumes: |-
    - name: united-manufacturing-hub-kowl-certificates
      secret:
        secretName: united-manufacturing-hub-kowl-secrets
  extraVolumeMounts: |-
    - name: united-manufacturing-hub-kowl-certificates
      mountPath: /SSL_certs/kafka
      readOnly: true

### packmlmqttsimulator ###
packmlmqttsimulator:
  image:
    repository: spruiktec/packml-simulator
    pullPolicy: IfNotPresent
    hash: 01e2f0da3542f1b4e0de830a8d24135de03fd9174dce184ed329bed3ee688e19
  env:
    area: DefaultArea
    productionline: DefaultProductionLine
    site: testLocation
    mqtt:
      password: INSECURE_INSECURE_INSECURE
      encryptedPassword: ZzBCbzEyaWlnZkRjbndTa2RLTW1aSmlsOWtQSWtpak0=:100:9FWqFUN88VPio9yFR59XbE9fr/GUkM1fnKCNn2wvK06MMtKp5LPtUrTCOLhHgkFQ6IMw92wi9HTsLRFxnM+reQ==
  replicas: 1
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "100m"
      memory: "100Mi"

### mqtt-kafka-bridge ###
mqttkafkabridge:
  enabled: false
  image:
    repository: unitedmanufacturinghub/mqtt-kafka-bridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1
  initContainer:
    repository: unitedmanufacturinghub/kafka-init
    pullPolicy: IfNotPresent
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: WDRkN1c4MnpVb3BsS25qZG5qbkcxSUFuQm5kVVZVbW4=:100:H/o0vsDqmVfzkoLU6rPG8C7+0gzYjkH2E7q3+/5aXKFlSYEyBO/tiin02gxpcB0A/1j7fudGbZhQfI+dZa1GCQ==

### kafka-to-blob ###
kafkatoblob:
  enabled: false
  image:
    repository: unitedmanufacturinghub/kafka-to-blob
    pullPolicy: IfNotPresent
  replicas: 1
  pdb:
    enabled: true
    minAvailable: 1

##### CONFIG FOR APACHE KAFKA #####
kafka:
  livenessProbe:
    failureThreshold: 10
    timeoutSeconds: 10
  startupProbe:
    enabled: true
    failureThreshold: 600
    periodSeconds: 10
    timeoutSeconds: 10
  replicas: 1
  storageRequest: 1Gi
  allowPlaintextListener: true
  service:
    type: ClusterIP
    ports:
      client: 9092
      internal: 9093
      external: 9094
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
  provisioning:
    enabled: false
    numPartitions: 1
    replicationFactor: 1
  zookeeper:
    enabled: true
    heapSize: 128
    auth:
      enabled: false
  externalZookeeper:
    servers: []
  autoCreateTopicsEnable: true
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 250Mi
  logRetentionHours: 168
  logSegmentBytes: _10485760 # 10MiB
  logRetentionBytes: _26214400 # 25MiB
  numPartitions: 6
  auth:
    clientProtocol: plaintext
    tls:
      type: pem
      existingSecrets:
        - united-manufacturing-hub-kafka-broker-secrets

##### CONFIG FOR REDIS #####
redis:
  cluster:
    enabled: true
    slaveCount: 1
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # Backwards compatability with Redis version 6.*
    replica-ignore-disk-write-errors yes
  master:
    command: /run.sh
    extraFlags:
      - --maxmemory 200mb
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
      path: /data
      size: 8Gi
      subPath: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      ports:
        redis: 6379
      type: ClusterIP
  metrics:
    enabled: true
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    serviceMonitor:
      enabled: false
  networkPolicy:
    enabled: false
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: true
    minAvailable: 2
  podSecurityPolicy:
    create: false
  rbac:
    create: false
    role:
      rules: []
  sentinel:
    downAfterMilliseconds: 1000
    enabled: true
    failoverTimeout: 18000
    initialCheckTimeout: 5
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    containerPorts:
      sentinel: 26379
    preExecCmds: ""
    quorum: 1
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      redisPort: 6379
      sentinelPort: 26379
      type: ClusterIP
    startupProbe:
      enabled: false
  serviceAccount:
    create: false
  replica:
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
      path: /data
      size: 8Gi
      subPath: ""
    containerPorts:
      redis: 6379
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    replicaCount: 1
    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      ports:
        redis: 6379
      type: ClusterIP
    shareProcessNamespace: false
    updateStrategy:
      type: RollingUpdate
  sysctl:
    enabled: false
  tls:
    authClients: true
    enabled: false
  auth:
    enabled: true
    usePasswordFiles: false
    existingSecret: redis-secret
    existingSecretPasswordKey: redispassword
  volumePermissions:
    enabled: false

##### CONFIG FOR HIVEMQ CE
##### you can set a tag if you want a version other than 2022.1
hivemqce:
  image:
    repository: hivemq/hivemq-ce
    tag: 2022.1
    pullPolicy: IfNotPresent
  initContainer:
    hivemqextensioninit:
      image:
        repository: unitedmanufacturinghub/hivemq-init
        #tag: 0.0.1-hivemqrbac4.5.3
        tag: latest
        pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 100Mi
  persistence:
    extension:
      size: 100Mi
    storage:
      size: 2Gi
  service:
    mqtt:
      enabled: true
      port: 1883
    mqtts:
      enabled: true
      port: 8883
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA
    type: LoadBalancer
    ws:
      enabled: false
      port: 8080
    wss:
      enabled: false
      port: 8443
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA
